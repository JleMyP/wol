{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wol Wake on Lan and some useful stuff as web service. install pip install git+https://github.com/JleMyP/wol.git#egg = wol [ all ] for using as cli tool, i recommend use pipx pipx install git+https://github.com/JleMyP/wol.git#egg = wol [ cli,ssh,scapy ] launch dev web server wol-dev-server to get command-line arguments type wol-dev-server -h . arguments --bind , -b - listen interface address. default - 127.0.0.1; --port , -p - listen port. default - 5000; --debug , -d - run in debug mode. default - false; --no-db - do not use database and disable CRUD api. arguments also can be passed through env vars prefixed by WOL_ , example - WOL_PORT=3000 python -m wol.wsgi . more seriously launch gunicorn --access-logfile - 'wol.wsgi:create_app()' docker launch docker run --rm -ti -p 5000 :5000 ghcr.io/jlemyp/wol or for use syn/ack tcp packets instead of ping for checking host: docker run --rm -u root -p 5000 :5000 ghcr.io/jlemyp/wol port can be passed at the build stage - --build-arg PORT=8000 , or at the launch stage - -e PORT=8000 . default user has no root permissions, so the port can't be less than 1024, or you can launch the container with root user - -u root -e PORT=80 . other configurations can be passed wia GUNICORN_CMD_ARGS variable. usage api doc cli doc todo functionality: ssh pkey access control jwt browsable interface configuration sentry dsn userless mode sync names: host, hostname, address, login, username, etc validate model filling in per model actions replace configparser by typer extend per model actions mass core operations mass per model operations add hosts from scanning net operability: in-app openapi doc healthcheck disable ht logs sentry tests ci","title":"Home"},{"location":"#wol","text":"Wake on Lan and some useful stuff as web service.","title":"wol"},{"location":"#install","text":"pip install git+https://github.com/JleMyP/wol.git#egg = wol [ all ] for using as cli tool, i recommend use pipx pipx install git+https://github.com/JleMyP/wol.git#egg = wol [ cli,ssh,scapy ]","title":"install"},{"location":"#launch-dev-web-server","text":"wol-dev-server to get command-line arguments type wol-dev-server -h . arguments --bind , -b - listen interface address. default - 127.0.0.1; --port , -p - listen port. default - 5000; --debug , -d - run in debug mode. default - false; --no-db - do not use database and disable CRUD api. arguments also can be passed through env vars prefixed by WOL_ , example - WOL_PORT=3000 python -m wol.wsgi .","title":"launch dev web server"},{"location":"#more-seriously-launch","text":"gunicorn --access-logfile - 'wol.wsgi:create_app()'","title":"more seriously launch"},{"location":"#docker-launch","text":"docker run --rm -ti -p 5000 :5000 ghcr.io/jlemyp/wol or for use syn/ack tcp packets instead of ping for checking host: docker run --rm -u root -p 5000 :5000 ghcr.io/jlemyp/wol port can be passed at the build stage - --build-arg PORT=8000 , or at the launch stage - -e PORT=8000 . default user has no root permissions, so the port can't be less than 1024, or you can launch the container with root user - -u root -e PORT=80 . other configurations can be passed wia GUNICORN_CMD_ARGS variable.","title":"docker launch"},{"location":"#usage","text":"api doc cli doc","title":"usage"},{"location":"#todo","text":"functionality: ssh pkey access control jwt browsable interface configuration sentry dsn userless mode sync names: host, hostname, address, login, username, etc validate model filling in per model actions replace configparser by typer extend per model actions mass core operations mass per model operations add hosts from scanning net operability: in-app openapi doc healthcheck disable ht logs sentry tests ci","title":"todo"},{"location":"cli/","text":"wol-cli Wake On Lan and some useful stuff Usage : $ wol-cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -v, --verbose : more detailed output [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : check : check if host is online (SYN/ACK to 80 port... reboot : reboot a remote host (ssh) scan : scan local net by ARP protocol shutdown : immediately shutdown a remote host (ssh) stats : get CPU stats of a remote host (ssh) wake : wake up the host wol-cli check check if host is online (SYN/ACK to 80 port or ping) Usage : $ wol-cli check [ OPTIONS ] HOST Arguments : HOST : remote host. ip or hostname [required] Options : --help : Show this message and exit. wol-cli reboot reboot a remote host (ssh) Usage : $ wol-cli reboot [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --help : Show this message and exit. wol-cli scan scan local net by ARP protocol Usage : $ wol-cli scan [ OPTIONS ] Options : --help : Show this message and exit. wol-cli shutdown immediately shutdown a remote host (ssh) Usage : $ wol-cli shutdown [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --help : Show this message and exit. wol-cli stats get CPU stats of a remote host (ssh) Usage : $ wol-cli stats [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --precision INTEGER : count of digits after point --help : Show this message and exit. wol-cli wake wake up the host Usage : $ wol-cli wake [ OPTIONS ] MAC Arguments : MAC : MAC address of a remote host [required] Options : -h, --host TEXT : ip addr for packet destination [default: 255.255.255.255] -p, --port INTEGER RANGE : WOL port [default: 9] --help : Show this message and exit.","title":"CLI"},{"location":"cli/#wol-cli","text":"Wake On Lan and some useful stuff Usage : $ wol-cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -v, --verbose : more detailed output [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : check : check if host is online (SYN/ACK to 80 port... reboot : reboot a remote host (ssh) scan : scan local net by ARP protocol shutdown : immediately shutdown a remote host (ssh) stats : get CPU stats of a remote host (ssh) wake : wake up the host","title":"wol-cli"},{"location":"cli/#wol-cli-check","text":"check if host is online (SYN/ACK to 80 port or ping) Usage : $ wol-cli check [ OPTIONS ] HOST Arguments : HOST : remote host. ip or hostname [required] Options : --help : Show this message and exit.","title":"wol-cli check"},{"location":"cli/#wol-cli-reboot","text":"reboot a remote host (ssh) Usage : $ wol-cli reboot [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --help : Show this message and exit.","title":"wol-cli reboot"},{"location":"cli/#wol-cli-scan","text":"scan local net by ARP protocol Usage : $ wol-cli scan [ OPTIONS ] Options : --help : Show this message and exit.","title":"wol-cli scan"},{"location":"cli/#wol-cli-shutdown","text":"immediately shutdown a remote host (ssh) Usage : $ wol-cli shutdown [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --help : Show this message and exit.","title":"wol-cli shutdown"},{"location":"cli/#wol-cli-stats","text":"get CPU stats of a remote host (ssh) Usage : $ wol-cli stats [ OPTIONS ] HOST Arguments : HOST : remote host. it can be ip, hostname and alias from ssh config [required] Options : --login TEXT : ssh username. default - current user or from ssh config --password TEXT : ssh password. default - none or from ssh config -p, --port INTEGER RANGE : ssh port. default - 22 or from ssh config --precision INTEGER : count of digits after point --help : Show this message and exit.","title":"wol-cli stats"},{"location":"cli/#wol-cli-wake","text":"wake up the host Usage : $ wol-cli wake [ OPTIONS ] MAC Arguments : MAC : MAC address of a remote host [required] Options : -h, --host TEXT : ip addr for packet destination [default: 255.255.255.255] -p, --port INTEGER RANGE : WOL port [default: 9] --help : Show this message and exit.","title":"wol-cli wake"},{"location":"reference/wol/","text":"Module wol None None Sub-modules wol.cli wol.decorators wol.doc_utils wol.fields wol.logic wol.models wol.views wol.wsgi","title":"Index"},{"location":"reference/wol/#module-wol","text":"None None","title":"Module wol"},{"location":"reference/wol/#sub-modules","text":"wol.cli wol.decorators wol.doc_utils wol.fields wol.logic wol.models wol.views wol.wsgi","title":"Sub-modules"},{"location":"reference/wol/cli/","text":"Module wol.cli entrypoint for launching command line interface. None View Sourcebin/env python3 \"\"\" entrypoint for launching command line interface. \"\"\" import json from collections import OrderedDict from contextlib import contextmanager from inspect import Parameter , signature from typing import Callable , Optional import typer from marshmallow import ValidationError from pygments import highlight from pygments.formatters import TerminalFormatter from pygments.lexers import JsonLexer from .fields import validate_host as _validate_host from .fields import validate_mac as _validate_mac from .logic import core from .logic.core import SshCredentials app = typer . Typer ( help = \"Wake On Lan and some useful stuff\" ) global_opts = { 'vetbose' : False , } def validate ( ctx : typer . Context , validator : Callable , value : any ) -> any : \"\"\"wrapper, that ignore validation at completion search\"\"\" if ctx . resilient_parsing : return try : validator ( value ) except ValidationError as e : raise typer . BadParameter ( '; ' . join ( e . messages )) return value def validate_host ( ctx : typer . Context , host : str ) -> Optional [ str ]: return validate ( ctx , _validate_host , host ) def validate_mac ( ctx : typer . Context , mac : str ) -> Optional [ str ]: return validate ( ctx , _validate_mac , mac ) @contextmanager def catch_remote_error ( verbose : bool ) -> None : \"\"\"unified display ssh errors\"\"\" try : yield except NotImplementedError : err = typer . style ( \"can't use remote execution\" , fg = typer . colors . RED ) typer . echo ( err + \" \\n fabric is installed?\" , err = True ) raise typer . Exit ( code = 1 ) except core . RemoteExecError as e : err = typer . style ( \"can't exec command host: \" , fg = typer . colors . RED ) err += e . reason if verbose and e . details : fmt = highlight ( json . dumps ( e . details , indent = 4 ), JsonLexer (), TerminalFormatter ()) err += ' \\n ' + fmt typer . echo ( err , err = True ) raise typer . Exit ( code = 1 ) def replace_ssh_args ( func ) -> Callable : \"\"\"add ssh parameters to command and pass it to the target function as dataclass\"\"\" def decorated ( # TODO: path to ssh config and disabling it host : str = typer . Argument ( ... , callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ): kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) param_name = [ k for k , v in func . __annotations__ . items () if v is SshCredentials ][ 0 ] fsig = signature ( func ) fparams = OrderedDict ( ** fsig . parameters ) fparams . pop ( param_name ) dparams = signature ( decorated ) . parameters dparams = OrderedDict ( ** { k : v for k , v in dparams . items () if v . kind != Parameter . VAR_KEYWORD }) fsig . _parameters = OrderedDict ( ** dparams , ** fparams ) decorated . __signature__ = fsig decorated . __annotations__ . update ( ** { k : v for k , v in func . __annotations__ . items () if k != param_name }) # functools.wraps loses the annotations decorated . __name__ = func . __name__ decorated . __doc__ = func . __doc__ return decorated @app . callback () def global_callback ( verbose : bool = typer . Option ( False , '--verbose' , '-v' , help = \"more detailed output\" ), ) -> None : global_opts [ 'verbose' ] = verbose @app . command () def check ( host : str = typer . Argument ( ... , callback = validate_host , help = \"remote host. ip or hostname\" ), ) -> None : \"\"\"check if host is online (SYN/ACK to 80 port or ping)\"\"\" result = core . check_host ( host ) if result : typer . secho ( \"reached\" , fg = typer . colors . GREEN ) else : typer . secho ( \"not reached\" , fg = typer . colors . RED ) raise typer . Exit ( code = 1 ) @app . command () def wake ( mac : str = typer . Argument ( ... , callback = validate_mac , help = \"MAC address of a remote host\" ), host : str = typer . Option ( '255.255.255.255' , '--host' , '-h' , callback = validate_host , help = \"ip addr for packet destination\" ), port : int = typer . Option ( 9 , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"WOL port\" ), ) -> None : \"\"\"wake up the host\"\"\" core . wakeup_host ( mac , host , port ) typer . echo ( \"\u2728 Magic \u2728 packet sent\" ) @app . command () @replace_ssh_args def reboot ( creds : SshCredentials , ) -> None : \"\"\"reboot a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): core . reboot_host ( creds ) typer . secho ( \"reboot started\" , fg = typer . colors . GREEN ) @app . command () @replace_ssh_args def shutdown ( creds : SshCredentials , ) -> None : \"\"\"immediately shutdown a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): core . shutdown_host ( creds ) typer . secho ( \"shutdown success\" , fg = typer . colors . GREEN ) @app . command () @replace_ssh_args def stats ( creds : SshCredentials , precision : Optional [ int ] = typer . Option ( None , help = \"count of digits after point\" ), ) -> None : \"\"\"get CPU stats of a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): result = core . get_cpu_stat ( creds , precision ) fmt = json . dumps ( result . _asdict (), indent = 4 ) fmt = highlight ( fmt , JsonLexer (), TerminalFormatter ()) typer . echo ( fmt ) @app . command () def scan () -> None : \"\"\"scan local net by ARP protocol\"\"\" try : results = core . scan_local_net () except NotImplementedError : err = typer . style ( \"can't use scapy\" , fg = typer . colors . RED ) typer . echo ( err + \" \\n it is installed and user is root?\" , err = True ) raise typer . Exit ( code = 1 ) if results : typer . echo ( \"results: \\n \" + ' \\n ' . join ( f ' { pair [ \"ip\" ] } \\t | { pair [ \"mac\" ] } ' for pair in results )) else : typer . echo ( \"no results\" ) if __name__ == '__main__' : app () Variables app global_opts Functions catch_remote_error def catch_remote_error ( verbose : bool ) -> None unified display ssh errors View Source @contextmanager def catch_remote_error ( verbose : bool ) -> None : \"\"\"unified display ssh errors\"\"\" try : yield except NotImplementedError : err = typer . style ( \"can't use remote execution\" , fg = typer . colors . RED ) typer . echo ( err + \"\\nfabric is installed?\" , err = True ) raise typer . Exit ( code = 1 ) except core . RemoteExecError as e : err = typer . style ( \"can't exec command host: \" , fg = typer . colors . RED ) err += e . reason if verbose and e . details : fmt = highlight ( json . dumps ( e . details , indent = 4 ), JsonLexer (), TerminalFormatter ()) err += '\\n' + fmt typer . echo ( err , err = True ) raise typer . Exit ( code = 1 ) check def check ( host : str = < typer . models . ArgumentInfo object at 0x7f6381494c40 > ) -> None check if host is online (SYN/ACK to 80 port or ping) View Source @app . command () def check ( host : str = typer . Argument (..., callback = validate_host , help = \"remote host. ip or hostname\" ), ) -> None : \"\"\"check if host is online (SYN/ACK to 80 port or ping)\"\"\" result = core . check_host ( host ) if result : typer . secho ( \"reached\" , fg = typer . colors . GREEN ) else : typer . secho ( \"not reached\" , fg = typer . colors . RED ) raise typer . Exit ( code = 1 ) global_callback def global_callback ( verbose : bool = < typer . models . OptionInfo object at 0x7f63813eea00 > ) -> None View Source @app . callback () def global_callback ( verbose : bool = typer . Option ( False , '--verbose' , '-v' , help = \"more detailed output\" ), ) -> None : global_opts [ 'verbose' ] = verbose reboot def reboot ( host : str = < typer . models . ArgumentInfo object at 0x7f63813eec70 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813eed00 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813eefa0 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813eefd0 > ) -> None reboot a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) replace_ssh_args def replace_ssh_args ( func ) -> Callable add ssh parameters to command and pass it to the target function as dataclass View Source def replace_ssh_args ( func ) -> Callable : \"\"\"add ssh parameters to command and pass it to the target function as dataclass\"\"\" def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) param_name = [ k for k, v in func.__annotations__.items() if v is SshCredentials ][ 0 ] fsig = signature ( func ) fparams = OrderedDict ( ** fsig . parameters ) fparams . pop ( param_name ) dparams = signature ( decorated ). parameters dparams = OrderedDict ( ** { k : v for k , v in dparams . items () if v . kind != Parameter . VAR_KEYWORD } ) fsig . _parameters = OrderedDict ( ** dparams , ** fparams ) decorated . __signature__ = fsig decorated . __annotations__ . update ( ** { k : v for k , v in func . __annotations__ . items () if k != param_name } ) # functools . wraps loses the annotations decorated . __name__ = func . __name__ decorated . __doc__ = func . __doc__ return decorated scan def scan ( ) -> None scan local net by ARP protocol View Source @app . command () def scan () -> None : \"\"\"scan local net by ARP protocol\"\"\" try : results = core . scan_local_net () except NotImplementedError : err = typer . style ( \"can't use scapy\" , fg = typer . colors . RED ) typer . echo ( err + \"\\nit is installed and user is root?\" , err = True ) raise typer . Exit ( code = 1 ) if results : typer . echo ( \"results:\\n\" + '\\n' . join ( f '{pair[\"ip\"]} \\t| {pair[\"mac\"]}' for pair in results )) else : typer . echo ( \"no results\" ) shutdown def shutdown ( host : str = < typer . models . ArgumentInfo object at 0x7f63813eef70 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813bcfa0 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813bc9d0 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813bc940 > ) -> None immediately shutdown a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) stats def stats ( host : str = < typer . models . ArgumentInfo object at 0x7f63813e2160 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813e2310 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813e2190 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f638130ce80 > , precision : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813bce20 > ) -> None get CPU stats of a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) validate def validate ( ctx : typer . models . Context , validator : Callable , value : < built - in function any > ) -> < built - in function any > wrapper, that ignore validation at completion search View Source def validate ( ctx : typer . Context , validator : Callable , value : any ) - > any : \"\"\"wrapper, that ignore validation at completion search\"\"\" if ctx . resilient_parsing : return try : validator ( value ) except ValidationError as e : raise typer . BadParameter ( '; ' . join ( e . messages )) return value validate_host def validate_host ( ctx : typer . models . Context , host : str ) -> Optional [ str ] View Source def validate_host ( ctx : typer . Context , host : str ) -> Optional [ str ] : return validate ( ctx , _validate_host , host ) validate_mac def validate_mac ( ctx : typer . models . Context , mac : str ) -> Optional [ str ] View Source def validate_mac ( ctx : typer . Context , mac : str ) -> Optional [ str ] : return validate ( ctx , _validate_mac , mac ) wake def wake ( mac : str = < typer . models . ArgumentInfo object at 0x7f63813ee640 > , host : str = < typer . models . OptionInfo object at 0x7f63813ee280 > , port : int = < typer . models . OptionInfo object at 0x7f63813ee790 > ) -> None wake up the host View Source @app . command () def wake ( mac : str = typer . Argument (..., callback = validate_mac , help = \"MAC address of a remote host\" ), host : str = typer . Option ( '255.255.255.255' , '--host' , '-h' , callback = validate_host , help = \"ip addr for packet destination\" ), port : int = typer . Option ( 9 , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"WOL port\" ), ) -> None : \"\"\"wake up the host\"\"\" core . wakeup_host ( mac , host , port ) typer . echo ( \"\u2728 Magic \u2728 packet sent\" )","title":"CLI"},{"location":"reference/wol/cli/#module-wolcli","text":"entrypoint for launching command line interface. None View Sourcebin/env python3 \"\"\" entrypoint for launching command line interface. \"\"\" import json from collections import OrderedDict from contextlib import contextmanager from inspect import Parameter , signature from typing import Callable , Optional import typer from marshmallow import ValidationError from pygments import highlight from pygments.formatters import TerminalFormatter from pygments.lexers import JsonLexer from .fields import validate_host as _validate_host from .fields import validate_mac as _validate_mac from .logic import core from .logic.core import SshCredentials app = typer . Typer ( help = \"Wake On Lan and some useful stuff\" ) global_opts = { 'vetbose' : False , } def validate ( ctx : typer . Context , validator : Callable , value : any ) -> any : \"\"\"wrapper, that ignore validation at completion search\"\"\" if ctx . resilient_parsing : return try : validator ( value ) except ValidationError as e : raise typer . BadParameter ( '; ' . join ( e . messages )) return value def validate_host ( ctx : typer . Context , host : str ) -> Optional [ str ]: return validate ( ctx , _validate_host , host ) def validate_mac ( ctx : typer . Context , mac : str ) -> Optional [ str ]: return validate ( ctx , _validate_mac , mac ) @contextmanager def catch_remote_error ( verbose : bool ) -> None : \"\"\"unified display ssh errors\"\"\" try : yield except NotImplementedError : err = typer . style ( \"can't use remote execution\" , fg = typer . colors . RED ) typer . echo ( err + \" \\n fabric is installed?\" , err = True ) raise typer . Exit ( code = 1 ) except core . RemoteExecError as e : err = typer . style ( \"can't exec command host: \" , fg = typer . colors . RED ) err += e . reason if verbose and e . details : fmt = highlight ( json . dumps ( e . details , indent = 4 ), JsonLexer (), TerminalFormatter ()) err += ' \\n ' + fmt typer . echo ( err , err = True ) raise typer . Exit ( code = 1 ) def replace_ssh_args ( func ) -> Callable : \"\"\"add ssh parameters to command and pass it to the target function as dataclass\"\"\" def decorated ( # TODO: path to ssh config and disabling it host : str = typer . Argument ( ... , callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ): kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) param_name = [ k for k , v in func . __annotations__ . items () if v is SshCredentials ][ 0 ] fsig = signature ( func ) fparams = OrderedDict ( ** fsig . parameters ) fparams . pop ( param_name ) dparams = signature ( decorated ) . parameters dparams = OrderedDict ( ** { k : v for k , v in dparams . items () if v . kind != Parameter . VAR_KEYWORD }) fsig . _parameters = OrderedDict ( ** dparams , ** fparams ) decorated . __signature__ = fsig decorated . __annotations__ . update ( ** { k : v for k , v in func . __annotations__ . items () if k != param_name }) # functools.wraps loses the annotations decorated . __name__ = func . __name__ decorated . __doc__ = func . __doc__ return decorated @app . callback () def global_callback ( verbose : bool = typer . Option ( False , '--verbose' , '-v' , help = \"more detailed output\" ), ) -> None : global_opts [ 'verbose' ] = verbose @app . command () def check ( host : str = typer . Argument ( ... , callback = validate_host , help = \"remote host. ip or hostname\" ), ) -> None : \"\"\"check if host is online (SYN/ACK to 80 port or ping)\"\"\" result = core . check_host ( host ) if result : typer . secho ( \"reached\" , fg = typer . colors . GREEN ) else : typer . secho ( \"not reached\" , fg = typer . colors . RED ) raise typer . Exit ( code = 1 ) @app . command () def wake ( mac : str = typer . Argument ( ... , callback = validate_mac , help = \"MAC address of a remote host\" ), host : str = typer . Option ( '255.255.255.255' , '--host' , '-h' , callback = validate_host , help = \"ip addr for packet destination\" ), port : int = typer . Option ( 9 , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"WOL port\" ), ) -> None : \"\"\"wake up the host\"\"\" core . wakeup_host ( mac , host , port ) typer . echo ( \"\u2728 Magic \u2728 packet sent\" ) @app . command () @replace_ssh_args def reboot ( creds : SshCredentials , ) -> None : \"\"\"reboot a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): core . reboot_host ( creds ) typer . secho ( \"reboot started\" , fg = typer . colors . GREEN ) @app . command () @replace_ssh_args def shutdown ( creds : SshCredentials , ) -> None : \"\"\"immediately shutdown a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): core . shutdown_host ( creds ) typer . secho ( \"shutdown success\" , fg = typer . colors . GREEN ) @app . command () @replace_ssh_args def stats ( creds : SshCredentials , precision : Optional [ int ] = typer . Option ( None , help = \"count of digits after point\" ), ) -> None : \"\"\"get CPU stats of a remote host (ssh)\"\"\" with catch_remote_error ( global_opts [ 'verbose' ]): result = core . get_cpu_stat ( creds , precision ) fmt = json . dumps ( result . _asdict (), indent = 4 ) fmt = highlight ( fmt , JsonLexer (), TerminalFormatter ()) typer . echo ( fmt ) @app . command () def scan () -> None : \"\"\"scan local net by ARP protocol\"\"\" try : results = core . scan_local_net () except NotImplementedError : err = typer . style ( \"can't use scapy\" , fg = typer . colors . RED ) typer . echo ( err + \" \\n it is installed and user is root?\" , err = True ) raise typer . Exit ( code = 1 ) if results : typer . echo ( \"results: \\n \" + ' \\n ' . join ( f ' { pair [ \"ip\" ] } \\t | { pair [ \"mac\" ] } ' for pair in results )) else : typer . echo ( \"no results\" ) if __name__ == '__main__' : app ()","title":"Module wol.cli"},{"location":"reference/wol/cli/#variables","text":"app global_opts","title":"Variables"},{"location":"reference/wol/cli/#functions","text":"","title":"Functions"},{"location":"reference/wol/cli/#catch_remote_error","text":"def catch_remote_error ( verbose : bool ) -> None unified display ssh errors View Source @contextmanager def catch_remote_error ( verbose : bool ) -> None : \"\"\"unified display ssh errors\"\"\" try : yield except NotImplementedError : err = typer . style ( \"can't use remote execution\" , fg = typer . colors . RED ) typer . echo ( err + \"\\nfabric is installed?\" , err = True ) raise typer . Exit ( code = 1 ) except core . RemoteExecError as e : err = typer . style ( \"can't exec command host: \" , fg = typer . colors . RED ) err += e . reason if verbose and e . details : fmt = highlight ( json . dumps ( e . details , indent = 4 ), JsonLexer (), TerminalFormatter ()) err += '\\n' + fmt typer . echo ( err , err = True ) raise typer . Exit ( code = 1 )","title":"catch_remote_error"},{"location":"reference/wol/cli/#check","text":"def check ( host : str = < typer . models . ArgumentInfo object at 0x7f6381494c40 > ) -> None check if host is online (SYN/ACK to 80 port or ping) View Source @app . command () def check ( host : str = typer . Argument (..., callback = validate_host , help = \"remote host. ip or hostname\" ), ) -> None : \"\"\"check if host is online (SYN/ACK to 80 port or ping)\"\"\" result = core . check_host ( host ) if result : typer . secho ( \"reached\" , fg = typer . colors . GREEN ) else : typer . secho ( \"not reached\" , fg = typer . colors . RED ) raise typer . Exit ( code = 1 )","title":"check"},{"location":"reference/wol/cli/#global_callback","text":"def global_callback ( verbose : bool = < typer . models . OptionInfo object at 0x7f63813eea00 > ) -> None View Source @app . callback () def global_callback ( verbose : bool = typer . Option ( False , '--verbose' , '-v' , help = \"more detailed output\" ), ) -> None : global_opts [ 'verbose' ] = verbose","title":"global_callback"},{"location":"reference/wol/cli/#reboot","text":"def reboot ( host : str = < typer . models . ArgumentInfo object at 0x7f63813eec70 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813eed00 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813eefa0 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813eefd0 > ) -> None reboot a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs )","title":"reboot"},{"location":"reference/wol/cli/#replace_ssh_args","text":"def replace_ssh_args ( func ) -> Callable add ssh parameters to command and pass it to the target function as dataclass View Source def replace_ssh_args ( func ) -> Callable : \"\"\"add ssh parameters to command and pass it to the target function as dataclass\"\"\" def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs ) param_name = [ k for k, v in func.__annotations__.items() if v is SshCredentials ][ 0 ] fsig = signature ( func ) fparams = OrderedDict ( ** fsig . parameters ) fparams . pop ( param_name ) dparams = signature ( decorated ). parameters dparams = OrderedDict ( ** { k : v for k , v in dparams . items () if v . kind != Parameter . VAR_KEYWORD } ) fsig . _parameters = OrderedDict ( ** dparams , ** fparams ) decorated . __signature__ = fsig decorated . __annotations__ . update ( ** { k : v for k , v in func . __annotations__ . items () if k != param_name } ) # functools . wraps loses the annotations decorated . __name__ = func . __name__ decorated . __doc__ = func . __doc__ return decorated","title":"replace_ssh_args"},{"location":"reference/wol/cli/#scan","text":"def scan ( ) -> None scan local net by ARP protocol View Source @app . command () def scan () -> None : \"\"\"scan local net by ARP protocol\"\"\" try : results = core . scan_local_net () except NotImplementedError : err = typer . style ( \"can't use scapy\" , fg = typer . colors . RED ) typer . echo ( err + \"\\nit is installed and user is root?\" , err = True ) raise typer . Exit ( code = 1 ) if results : typer . echo ( \"results:\\n\" + '\\n' . join ( f '{pair[\"ip\"]} \\t| {pair[\"mac\"]}' for pair in results )) else : typer . echo ( \"no results\" )","title":"scan"},{"location":"reference/wol/cli/#shutdown","text":"def shutdown ( host : str = < typer . models . ArgumentInfo object at 0x7f63813eef70 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813bcfa0 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813bc9d0 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813bc940 > ) -> None immediately shutdown a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs )","title":"shutdown"},{"location":"reference/wol/cli/#stats","text":"def stats ( host : str = < typer . models . ArgumentInfo object at 0x7f63813e2160 > , login : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813e2310 > , password : Optional [ str ] = < typer . models . OptionInfo object at 0x7f63813e2190 > , port : Optional [ int ] = < typer . models . OptionInfo object at 0x7f638130ce80 > , precision : Optional [ int ] = < typer . models . OptionInfo object at 0x7f63813bce20 > ) -> None get CPU stats of a remote host (ssh) View Source def decorated ( # TODO : path to ssh config and disabling it host : str = typer . Argument (..., callback = validate_host , help = \"remote host. it can be ip, hostname\" \" and alias from ssh config\" ), login : Optional [ str ] = typer . Option ( None , help = \"ssh username. default - current user\" \" or from ssh config\" ), password : Optional [ str ] = typer . Option ( None , help = \"ssh password. default - \" \"none or from ssh config\" ), port : Optional [ int ] = typer . Option ( None , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"ssh port. default - 22 or from ssh config\" ), ** kwargs , ) : kwargs [ param_name ] = SshCredentials ( host = host , port = port , login = login , password = password ) return func ( ** kwargs )","title":"stats"},{"location":"reference/wol/cli/#validate","text":"def validate ( ctx : typer . models . Context , validator : Callable , value : < built - in function any > ) -> < built - in function any > wrapper, that ignore validation at completion search View Source def validate ( ctx : typer . Context , validator : Callable , value : any ) - > any : \"\"\"wrapper, that ignore validation at completion search\"\"\" if ctx . resilient_parsing : return try : validator ( value ) except ValidationError as e : raise typer . BadParameter ( '; ' . join ( e . messages )) return value","title":"validate"},{"location":"reference/wol/cli/#validate_host","text":"def validate_host ( ctx : typer . models . Context , host : str ) -> Optional [ str ] View Source def validate_host ( ctx : typer . Context , host : str ) -> Optional [ str ] : return validate ( ctx , _validate_host , host )","title":"validate_host"},{"location":"reference/wol/cli/#validate_mac","text":"def validate_mac ( ctx : typer . models . Context , mac : str ) -> Optional [ str ] View Source def validate_mac ( ctx : typer . Context , mac : str ) -> Optional [ str ] : return validate ( ctx , _validate_mac , mac )","title":"validate_mac"},{"location":"reference/wol/cli/#wake","text":"def wake ( mac : str = < typer . models . ArgumentInfo object at 0x7f63813ee640 > , host : str = < typer . models . OptionInfo object at 0x7f63813ee280 > , port : int = < typer . models . OptionInfo object at 0x7f63813ee790 > ) -> None wake up the host View Source @app . command () def wake ( mac : str = typer . Argument (..., callback = validate_mac , help = \"MAC address of a remote host\" ), host : str = typer . Option ( '255.255.255.255' , '--host' , '-h' , callback = validate_host , help = \"ip addr for packet destination\" ), port : int = typer . Option ( 9 , '--port' , '-p' , min = 1 , max = 2 ** 16 - 1 , help = \"WOL port\" ), ) -> None : \"\"\"wake up the host\"\"\" core . wakeup_host ( mac , host , port ) typer . echo ( \"\u2728 Magic \u2728 packet sent\" )","title":"wake"},{"location":"reference/wol/decorators/","text":"Module wol.decorators None None View Source from functools import wraps from typing import Callable from flask import request from marshmallow import Schema __all__ = [ 'parse_body' , 'parse_query' ] DECORATOR_TYPE = Callable [[ Callable ], Callable ] def parse_body ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request json body according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . get_json ()) return func ( * args , ** kwargs , body = data ) return wrapped return decorator def parse_query ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request query parameters according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . args ) return func ( * args , ** kwargs , query = data ) return wrapped return decorator Functions parse_body def parse_body ( schema : marshmallow . schema . Schema ) -> Callable [[ Callable ], Callable ] parse the request json body according to the specified scheme. View Source def parse_body ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request json body according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @ wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . get_json ()) return func ( * args , ** kwargs , body = data ) return wrapped return decorator parse_query def parse_query ( schema : marshmallow . schema . Schema ) -> Callable [[ Callable ], Callable ] parse the request query parameters according to the specified scheme. View Source def parse_query ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request query parameters according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @ wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . args ) return func ( * args , ** kwargs , query = data ) return wrapped return decorator","title":"Decorators"},{"location":"reference/wol/decorators/#module-woldecorators","text":"None None View Source from functools import wraps from typing import Callable from flask import request from marshmallow import Schema __all__ = [ 'parse_body' , 'parse_query' ] DECORATOR_TYPE = Callable [[ Callable ], Callable ] def parse_body ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request json body according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . get_json ()) return func ( * args , ** kwargs , body = data ) return wrapped return decorator def parse_query ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request query parameters according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . args ) return func ( * args , ** kwargs , query = data ) return wrapped return decorator","title":"Module wol.decorators"},{"location":"reference/wol/decorators/#functions","text":"","title":"Functions"},{"location":"reference/wol/decorators/#parse_body","text":"def parse_body ( schema : marshmallow . schema . Schema ) -> Callable [[ Callable ], Callable ] parse the request json body according to the specified scheme. View Source def parse_body ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request json body according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @ wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . get_json ()) return func ( * args , ** kwargs , body = data ) return wrapped return decorator","title":"parse_body"},{"location":"reference/wol/decorators/#parse_query","text":"def parse_query ( schema : marshmallow . schema . Schema ) -> Callable [[ Callable ], Callable ] parse the request query parameters according to the specified scheme. View Source def parse_query ( schema : Schema ) -> DECORATOR_TYPE : \"\"\"parse the request query parameters according to the specified scheme.\"\"\" def decorator ( func : Callable ) -> Callable : @ wraps ( func ) def wrapped ( * args , ** kwargs ): data = schema . load ( request . args ) return func ( * args , ** kwargs , query = data ) return wrapped return decorator","title":"parse_query"},{"location":"reference/wol/doc_utils/","text":"Module wol.doc_utils None None View Source import inspect def exclude_parent_attrs ( klass , skip = ()): module = inspect . getmodule ( klass ) if not hasattr ( module , '__pdoc__' ): module . __pdoc__ = {} parent_fields = [ field for parent in klass . __bases__ for field in dir ( parent ) if not field . startswith ( '_' ) and field not in skip ] for field in parent_fields : module . __pdoc__ [ f ' { klass . __name__ } . { field } ' ] = None Functions exclude_parent_attrs def exclude_parent_attrs ( klass , skip = () ) View Source def exclude_parent_attrs ( klass , skip = ()) : module = inspect . getmodule ( klass ) if not hasattr ( module , ' __pdoc__ ' ) : module . __pdoc__ = {} parent_fields = [ field for parent in klass . __bases__ for field in dir ( parent ) if not field . startswith ( ' _ ' ) and field not in skip ] for field in parent_fields : module . __pdoc__ [ f ' {klass.__name__}.{field} ' ] = None","title":"Doc Utils"},{"location":"reference/wol/doc_utils/#module-woldoc_utils","text":"None None View Source import inspect def exclude_parent_attrs ( klass , skip = ()): module = inspect . getmodule ( klass ) if not hasattr ( module , '__pdoc__' ): module . __pdoc__ = {} parent_fields = [ field for parent in klass . __bases__ for field in dir ( parent ) if not field . startswith ( '_' ) and field not in skip ] for field in parent_fields : module . __pdoc__ [ f ' { klass . __name__ } . { field } ' ] = None","title":"Module wol.doc_utils"},{"location":"reference/wol/doc_utils/#functions","text":"","title":"Functions"},{"location":"reference/wol/doc_utils/#exclude_parent_attrs","text":"def exclude_parent_attrs ( klass , skip = () ) View Source def exclude_parent_attrs ( klass , skip = ()) : module = inspect . getmodule ( klass ) if not hasattr ( module , ' __pdoc__ ' ) : module . __pdoc__ = {} parent_fields = [ field for parent in klass . __bases__ for field in dir ( parent ) if not field . startswith ( ' _ ' ) and field not in skip ] for field in parent_fields : module . __pdoc__ [ f ' {klass.__name__}.{field} ' ] = None","title":"exclude_parent_attrs"},{"location":"reference/wol/fields/","text":"Module wol.fields Custom fields with validation for marshallow None View Source \"\"\" Custom fields with validation for marshallow \"\"\" from typing import ( Callable , List , Optional , Type , ) try : from fabric.config import Config except ImportError : Config = None from marshmallow import ValidationError , fields , validate from validators import ( domain , ipv4 , ipv6 , mac_address , ) from .doc_utils import exclude_parent_attrs __all__ = [ 'IpAddressField' , 'HostField' , 'PortField' , 'MacField' , 'validate_ip' , 'validate_host' , 'validate_mac' ] def validate_ip ( ip : str ) -> None : for validator in [ ipv4 , ipv6 ]: if validator ( ip ) is True : break else : raise ValidationError ( f '\" { ip } \" is not a valid ip address' ) def validate_host ( host : str ) -> None : for validator in [ ipv4 , ipv6 , domain ]: if validator ( host ) is True : break else : if not Config : return patterns = Config () . base_ssh_config . get_hostnames () # TODO: more complex filter known_hosts = [ p for p in patterns if '*' not in p ] known_hosts += [ 'localhost' ] if host not in known_hosts : raise ValidationError ( f '\" { host } \" is not a valid host' ) def validate_mac ( mac : str ) -> None : if mac_address ( mac ) is not True : raise ValidationError ( f '\" { mac } \" is not a valid mac' ) def add_validators ( name : str , base : Type [ fields . Field ], validators : List [ Callable [[ any ], None ]], doc_string : Optional [ str ] = None , ) -> type : # TODO: Type[fields.Field] \"\"\"generate schema field by adding validators to existing field. :param name: name of a new field. :param base: base field. :param validators: list of validators. :param doc_string: documentation for annotating new func. :return: a new field with added validators. \"\"\" def __init__ ( self , ** kwargs ): _validate = kwargs . pop ( 'validate' , []) if callable ( _validate ): _validate = [ _validate ] _validate . extend ( validators ) kwargs [ 'validate' ] = _validate super ( base , self ) . __init__ ( ** kwargs ) # noqa # TODO: what's wrong? attrs = { '__init__' : __init__ } if doc_string : attrs [ '__doc__' ] = doc_string return type ( name , ( base ,), attrs ) IpAddressField = add_validators ( 'IpAddressField' , fields . String , [ validate_ip ], 'validates IPv4 and IPv6 addresses' ) HostField = add_validators ( 'HostField' , fields . String , [ validate_host ], 'validates IPv4, IPv6 and domain names' ) PortField = add_validators ( 'PortField' , fields . Integer , [ validate . Range ( min = 0 , max = 2 ** 16 - 1 )], 'validates web port' ) MacField = add_validators ( 'MacField' , fields . String , [ validate_mac ], 'validates MAC address' ) for field in ( IpAddressField , HostField , PortField , MacField ): exclude_parent_attrs ( field ) Functions validate_host def validate_host ( host : str ) -> None View Source def validate_host ( host : str ) -> None : for validator in [ ipv4 , ipv6 , domain ] : if validator ( host ) is True : break else : if not Config : return patterns = Config (). base_ssh_config . get_hostnames () # TODO : more complex filter known_hosts = [ p for p in patterns if '*' not in p ] known_hosts += [ 'localhost' ] if host not in known_hosts : raise ValidationError ( f '\" { host } \" is not a valid host' ) validate_ip def validate_ip ( ip : str ) -> None View Source def validate_ip ( ip : str ) -> None : for validator in [ ipv4 , ipv6 ] : if validator ( ip ) is True : break else : raise ValidationError ( f '\" { ip } \" is not a valid ip address' ) validate_mac def validate_mac ( mac : str ) -> None View Source def validate_mac ( mac : str ) -> None : if mac_address ( mac ) is not True : raise ValidationError ( f '\" { mac } \" is not a valid mac' ) Classes HostField class HostField ( ** kwargs ) Ancestors (in MRO) marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC IpAddressField class IpAddressField ( ** kwargs ) Ancestors (in MRO) marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC MacField class MacField ( ** kwargs ) Ancestors (in MRO) marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC PortField class PortField ( ** kwargs ) Ancestors (in MRO) marshmallow.fields.Integer marshmallow.fields.Number marshmallow.fields.Field marshmallow.base.FieldABC","title":"Fields"},{"location":"reference/wol/fields/#module-wolfields","text":"Custom fields with validation for marshallow None View Source \"\"\" Custom fields with validation for marshallow \"\"\" from typing import ( Callable , List , Optional , Type , ) try : from fabric.config import Config except ImportError : Config = None from marshmallow import ValidationError , fields , validate from validators import ( domain , ipv4 , ipv6 , mac_address , ) from .doc_utils import exclude_parent_attrs __all__ = [ 'IpAddressField' , 'HostField' , 'PortField' , 'MacField' , 'validate_ip' , 'validate_host' , 'validate_mac' ] def validate_ip ( ip : str ) -> None : for validator in [ ipv4 , ipv6 ]: if validator ( ip ) is True : break else : raise ValidationError ( f '\" { ip } \" is not a valid ip address' ) def validate_host ( host : str ) -> None : for validator in [ ipv4 , ipv6 , domain ]: if validator ( host ) is True : break else : if not Config : return patterns = Config () . base_ssh_config . get_hostnames () # TODO: more complex filter known_hosts = [ p for p in patterns if '*' not in p ] known_hosts += [ 'localhost' ] if host not in known_hosts : raise ValidationError ( f '\" { host } \" is not a valid host' ) def validate_mac ( mac : str ) -> None : if mac_address ( mac ) is not True : raise ValidationError ( f '\" { mac } \" is not a valid mac' ) def add_validators ( name : str , base : Type [ fields . Field ], validators : List [ Callable [[ any ], None ]], doc_string : Optional [ str ] = None , ) -> type : # TODO: Type[fields.Field] \"\"\"generate schema field by adding validators to existing field. :param name: name of a new field. :param base: base field. :param validators: list of validators. :param doc_string: documentation for annotating new func. :return: a new field with added validators. \"\"\" def __init__ ( self , ** kwargs ): _validate = kwargs . pop ( 'validate' , []) if callable ( _validate ): _validate = [ _validate ] _validate . extend ( validators ) kwargs [ 'validate' ] = _validate super ( base , self ) . __init__ ( ** kwargs ) # noqa # TODO: what's wrong? attrs = { '__init__' : __init__ } if doc_string : attrs [ '__doc__' ] = doc_string return type ( name , ( base ,), attrs ) IpAddressField = add_validators ( 'IpAddressField' , fields . String , [ validate_ip ], 'validates IPv4 and IPv6 addresses' ) HostField = add_validators ( 'HostField' , fields . String , [ validate_host ], 'validates IPv4, IPv6 and domain names' ) PortField = add_validators ( 'PortField' , fields . Integer , [ validate . Range ( min = 0 , max = 2 ** 16 - 1 )], 'validates web port' ) MacField = add_validators ( 'MacField' , fields . String , [ validate_mac ], 'validates MAC address' ) for field in ( IpAddressField , HostField , PortField , MacField ): exclude_parent_attrs ( field )","title":"Module wol.fields"},{"location":"reference/wol/fields/#functions","text":"","title":"Functions"},{"location":"reference/wol/fields/#validate_host","text":"def validate_host ( host : str ) -> None View Source def validate_host ( host : str ) -> None : for validator in [ ipv4 , ipv6 , domain ] : if validator ( host ) is True : break else : if not Config : return patterns = Config (). base_ssh_config . get_hostnames () # TODO : more complex filter known_hosts = [ p for p in patterns if '*' not in p ] known_hosts += [ 'localhost' ] if host not in known_hosts : raise ValidationError ( f '\" { host } \" is not a valid host' )","title":"validate_host"},{"location":"reference/wol/fields/#validate_ip","text":"def validate_ip ( ip : str ) -> None View Source def validate_ip ( ip : str ) -> None : for validator in [ ipv4 , ipv6 ] : if validator ( ip ) is True : break else : raise ValidationError ( f '\" { ip } \" is not a valid ip address' )","title":"validate_ip"},{"location":"reference/wol/fields/#validate_mac","text":"def validate_mac ( mac : str ) -> None View Source def validate_mac ( mac : str ) -> None : if mac_address ( mac ) is not True : raise ValidationError ( f '\" { mac } \" is not a valid mac' )","title":"validate_mac"},{"location":"reference/wol/fields/#classes","text":"","title":"Classes"},{"location":"reference/wol/fields/#hostfield","text":"class HostField ( ** kwargs )","title":"HostField"},{"location":"reference/wol/fields/#ancestors-in-mro","text":"marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/fields/#ipaddressfield","text":"class IpAddressField ( ** kwargs )","title":"IpAddressField"},{"location":"reference/wol/fields/#ancestors-in-mro_1","text":"marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/fields/#macfield","text":"class MacField ( ** kwargs )","title":"MacField"},{"location":"reference/wol/fields/#ancestors-in-mro_2","text":"marshmallow.fields.String marshmallow.fields.Field marshmallow.base.FieldABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/fields/#portfield","text":"class PortField ( ** kwargs )","title":"PortField"},{"location":"reference/wol/fields/#ancestors-in-mro_3","text":"marshmallow.fields.Integer marshmallow.fields.Number marshmallow.fields.Field marshmallow.base.FieldABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/models/","text":"Module wol.models None None View Source from peewee import * from playhouse.flask_utils import FlaskDB from .doc_utils import exclude_parent_attrs __all__ = [ 'db' , 'Credentials' , 'Target' , 'WakeUpSchedule' ] db = FlaskDB () class Credentials ( db . Model ): username = CharField () password = CharField ( null = True ) pkey = TextField ( null = True ) class Target ( db . Model ): name = CharField () host = CharField ( null = True ) mac = CharField ( null = True ) wol_port = IntegerField ( null = True ) credentials = ForeignKeyField ( Credentials , backref = 'targets' , null = True ) class WakeUpSchedule ( db . Model ): enabled = BooleanField ( default = True ) target = ForeignKeyField ( Target , backref = 'wakeup_schedules' ) # TODO: schedule settings def init_db (): db . database . create_tables ([ Credentials , Target , WakeUpSchedule ]) for model in ( Credentials , Target , WakeUpSchedule ): exclude_parent_attrs ( model , ( 'id' ,)) Variables db Classes Credentials class Credentials ( * args , ** kwargs ) View Source class Credentials ( db . Model ): username = CharField () password = CharField ( null = True ) pkey = TextField ( null = True ) Ancestors (in MRO) playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node Class variables id password pkey username Methods targets def targets ( ... ) Target class Target ( * args , ** kwargs ) View Source class Target ( db . Model ): name = CharField () host = CharField ( null = True ) mac = CharField ( null = True ) wol_port = IntegerField ( null = True ) credentials = ForeignKeyField ( Credentials , backref = 'targets' , null = True ) Ancestors (in MRO) playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node Class variables credentials credentials_id host id mac name wol_port Methods wakeup_schedules def wakeup_schedules ( ... ) WakeUpSchedule class WakeUpSchedule ( * args , ** kwargs ) View Source class WakeUpSchedule ( db . Model ): enabled = BooleanField ( default = True ) target = ForeignKeyField ( Target , backref = 'wakeup_schedules' ) # TODO: schedule settings Ancestors (in MRO) playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node Class variables enabled id target target_id","title":"Models"},{"location":"reference/wol/models/#module-wolmodels","text":"None None View Source from peewee import * from playhouse.flask_utils import FlaskDB from .doc_utils import exclude_parent_attrs __all__ = [ 'db' , 'Credentials' , 'Target' , 'WakeUpSchedule' ] db = FlaskDB () class Credentials ( db . Model ): username = CharField () password = CharField ( null = True ) pkey = TextField ( null = True ) class Target ( db . Model ): name = CharField () host = CharField ( null = True ) mac = CharField ( null = True ) wol_port = IntegerField ( null = True ) credentials = ForeignKeyField ( Credentials , backref = 'targets' , null = True ) class WakeUpSchedule ( db . Model ): enabled = BooleanField ( default = True ) target = ForeignKeyField ( Target , backref = 'wakeup_schedules' ) # TODO: schedule settings def init_db (): db . database . create_tables ([ Credentials , Target , WakeUpSchedule ]) for model in ( Credentials , Target , WakeUpSchedule ): exclude_parent_attrs ( model , ( 'id' ,))","title":"Module wol.models"},{"location":"reference/wol/models/#variables","text":"db","title":"Variables"},{"location":"reference/wol/models/#classes","text":"","title":"Classes"},{"location":"reference/wol/models/#credentials","text":"class Credentials ( * args , ** kwargs ) View Source class Credentials ( db . Model ): username = CharField () password = CharField ( null = True ) pkey = TextField ( null = True )","title":"Credentials"},{"location":"reference/wol/models/#ancestors-in-mro","text":"playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node","title":"Ancestors (in MRO)"},{"location":"reference/wol/models/#class-variables","text":"id password pkey username","title":"Class variables"},{"location":"reference/wol/models/#methods","text":"","title":"Methods"},{"location":"reference/wol/models/#targets","text":"def targets ( ... )","title":"targets"},{"location":"reference/wol/models/#target","text":"class Target ( * args , ** kwargs ) View Source class Target ( db . Model ): name = CharField () host = CharField ( null = True ) mac = CharField ( null = True ) wol_port = IntegerField ( null = True ) credentials = ForeignKeyField ( Credentials , backref = 'targets' , null = True )","title":"Target"},{"location":"reference/wol/models/#ancestors-in-mro_1","text":"playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node","title":"Ancestors (in MRO)"},{"location":"reference/wol/models/#class-variables_1","text":"credentials credentials_id host id mac name wol_port","title":"Class variables"},{"location":"reference/wol/models/#methods_1","text":"","title":"Methods"},{"location":"reference/wol/models/#wakeup_schedules","text":"def wakeup_schedules ( ... )","title":"wakeup_schedules"},{"location":"reference/wol/models/#wakeupschedule","text":"class WakeUpSchedule ( * args , ** kwargs ) View Source class WakeUpSchedule ( db . Model ): enabled = BooleanField ( default = True ) target = ForeignKeyField ( Target , backref = 'wakeup_schedules' ) # TODO: schedule settings","title":"WakeUpSchedule"},{"location":"reference/wol/models/#ancestors-in-mro_2","text":"playhouse.flask_utils.BaseModel peewee.Model peewee. metaclass_helper peewee.Node","title":"Ancestors (in MRO)"},{"location":"reference/wol/models/#class-variables_2","text":"enabled id target target_id","title":"Class variables"},{"location":"reference/wol/wsgi/","text":"Module wol.wsgi entrypoint for launching dev server. None View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 #!/usr/bin/env python3 \"\"\" entrypoint for launching dev server. \"\"\" import logging import sys from configargparse import ArgumentDefaultsHelpFormatter , ArgumentParser from environs import Env from flask import Flask , Response , jsonify from marshmallow import ValidationError from .views import core try : from . import models except ImportError : models = None else : from .views import crud , pages def create_app ( no_db : bool = False ): env = Env () env . read_env () logger = logging . getLogger ( __name__ ) logger . addHandler ( logging . StreamHandler ( sys . stdout )) app = Flask ( __name__ ) app . register_blueprint ( core , url_prefix = '/api' ) with env . prefixed ( 'WOL_' ): logger . setLevel ( env . log_level ( 'LOG_LEVEL' , logging . DEBUG )) if not env ( 'NO_DB' , False ) and not no_db and models : # TODO: shit app . config [ 'DATABASE' ] = env . str ( 'DATABASE_URL' , 'postgres://postgres@localhost:5432/wol' ) models . db . init_app ( app ) app . register_blueprint ( crud , url_prefix = '/api' ) app . register_blueprint ( pages ) @app . errorhandler ( ValidationError ) def handle_validation ( error : ValidationError ): response = jsonify ( error . messages ) response . status_code = 400 return response @app . errorhandler ( NotImplementedError ) def handle_not_implemented ( _error : NotImplementedError ): return Response ( status = 501 ) return app # TODO: catch 404? def dev_server (): parser = ArgumentParser ( auto_env_var_prefix = 'WOL_' , formatter_class = ArgumentDefaultsHelpFormatter , ) parser . add_argument ( '--bind' , '-b' , default = '127.0.0.1' , help = \"ip address to listen\" ) parser . add_argument ( '--port' , '-p' , default = 5000 , help = \"port to listen\" ) parser . add_argument ( '--debug' , '-d' , action = 'store_true' , default = False , help = \"run in debug mode\" ) parser . add_argument ( '--no-db' , action = 'store_true' , default = False , help = \"do not use database and disable CRUD api\" ) parser . add_argument ( 'command' , choices = ( 'run' , 'initdb' ), nargs = '?' , default = 'run' ) args = parser . parse_args () app = create_app ( no_db = args . no_db ) if args . command == 'run' : app . run ( host = args . bind , port = args . port , debug = args . debug ) elif args . command == 'initdb' : if args . no_db : print ( \"incompatible command and \\\" --no-db \\\" argument\" ) sys . exit ( 1 ) elif not models : print ( \"database deps is not installed (extra \\\" db \\\" \" ) sys . exit ( 1 ) else : models . init_db () print ( \"db initialized\" ) if __name__ == '__main__' : dev_server () Functions create_app def create_app ( no_db : bool = False ) View Source def create_app ( no_db : bool = False ) : env = Env () env . read_env () logger = logging . getLogger ( __name__ ) logger . addHandler ( logging . StreamHandler ( sys . stdout )) app = Flask ( __name__ ) app . register_blueprint ( core , url_prefix = '/api' ) with env . prefixed ( 'WOL_' ) : logger . setLevel ( env . log_level ( 'LOG_LEVEL' , logging . DEBUG )) if not env ( 'NO_DB' , False ) and not no_db and models : # TODO : shit app . config [ 'DATABASE' ] = env . str ( 'DATABASE_URL' , 'postgres://postgres@localhost:5432/wol' ) models . db . init_app ( app ) app . register_blueprint ( crud , url_prefix = '/api' ) app . register_blueprint ( pages ) @app . errorhandler ( ValidationError ) def handle_validation ( error : ValidationError ) : response = jsonify ( error . messages ) response . status_code = 400 return response @app . errorhandler ( NotImplementedError ) def handle_not_implemented ( _error : NotImplementedError ) : return Response ( status = 501 ) return app # TODO : catch 404 ? dev_server def dev_server ( ) View Source def dev_server (): parser = ArgumentParser ( auto_env_var_prefix = 'WOL_' , formatter_class = ArgumentDefaultsHelpFormatter , ) parser . add_argument ( '--bind' , '-b' , default = '127.0.0.1' , help = \"ip address to listen\" ) parser . add_argument ( '--port' , '-p' , default = 5000 , help = \"port to listen\" ) parser . add_argument ( '--debug' , '-d' , action = 'store_true' , default = False , help = \"run in debug mode\" ) parser . add_argument ( '--no-db' , action = 'store_true' , default = False , help = \"do not use database and disable CRUD api\" ) parser . add_argument ( 'command' , choices = ( 'run' , 'initdb' ), nargs = '?' , default = 'run' ) args = parser . parse_args () app = create_app ( no_db = args . no_db ) if args . command == 'run' : app . run ( host = args . bind , port = args . port , debug = args . debug ) elif args . command == 'initdb' : if args . no_db : print ( \"incompatible command and \\\" --no-db \\\" argument\" ) sys . exit ( 1 ) elif not models : print ( \"database deps is not installed (extra \\\" db \\\" \" ) sys . exit ( 1 ) else : models . init_db () print ( \"db initialized\" )","title":"Wsgi"},{"location":"reference/wol/wsgi/#module-wolwsgi","text":"entrypoint for launching dev server. None View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 #!/usr/bin/env python3 \"\"\" entrypoint for launching dev server. \"\"\" import logging import sys from configargparse import ArgumentDefaultsHelpFormatter , ArgumentParser from environs import Env from flask import Flask , Response , jsonify from marshmallow import ValidationError from .views import core try : from . import models except ImportError : models = None else : from .views import crud , pages def create_app ( no_db : bool = False ): env = Env () env . read_env () logger = logging . getLogger ( __name__ ) logger . addHandler ( logging . StreamHandler ( sys . stdout )) app = Flask ( __name__ ) app . register_blueprint ( core , url_prefix = '/api' ) with env . prefixed ( 'WOL_' ): logger . setLevel ( env . log_level ( 'LOG_LEVEL' , logging . DEBUG )) if not env ( 'NO_DB' , False ) and not no_db and models : # TODO: shit app . config [ 'DATABASE' ] = env . str ( 'DATABASE_URL' , 'postgres://postgres@localhost:5432/wol' ) models . db . init_app ( app ) app . register_blueprint ( crud , url_prefix = '/api' ) app . register_blueprint ( pages ) @app . errorhandler ( ValidationError ) def handle_validation ( error : ValidationError ): response = jsonify ( error . messages ) response . status_code = 400 return response @app . errorhandler ( NotImplementedError ) def handle_not_implemented ( _error : NotImplementedError ): return Response ( status = 501 ) return app # TODO: catch 404? def dev_server (): parser = ArgumentParser ( auto_env_var_prefix = 'WOL_' , formatter_class = ArgumentDefaultsHelpFormatter , ) parser . add_argument ( '--bind' , '-b' , default = '127.0.0.1' , help = \"ip address to listen\" ) parser . add_argument ( '--port' , '-p' , default = 5000 , help = \"port to listen\" ) parser . add_argument ( '--debug' , '-d' , action = 'store_true' , default = False , help = \"run in debug mode\" ) parser . add_argument ( '--no-db' , action = 'store_true' , default = False , help = \"do not use database and disable CRUD api\" ) parser . add_argument ( 'command' , choices = ( 'run' , 'initdb' ), nargs = '?' , default = 'run' ) args = parser . parse_args () app = create_app ( no_db = args . no_db ) if args . command == 'run' : app . run ( host = args . bind , port = args . port , debug = args . debug ) elif args . command == 'initdb' : if args . no_db : print ( \"incompatible command and \\\" --no-db \\\" argument\" ) sys . exit ( 1 ) elif not models : print ( \"database deps is not installed (extra \\\" db \\\" \" ) sys . exit ( 1 ) else : models . init_db () print ( \"db initialized\" ) if __name__ == '__main__' : dev_server ()","title":"Module wol.wsgi"},{"location":"reference/wol/wsgi/#functions","text":"","title":"Functions"},{"location":"reference/wol/wsgi/#create_app","text":"def create_app ( no_db : bool = False ) View Source def create_app ( no_db : bool = False ) : env = Env () env . read_env () logger = logging . getLogger ( __name__ ) logger . addHandler ( logging . StreamHandler ( sys . stdout )) app = Flask ( __name__ ) app . register_blueprint ( core , url_prefix = '/api' ) with env . prefixed ( 'WOL_' ) : logger . setLevel ( env . log_level ( 'LOG_LEVEL' , logging . DEBUG )) if not env ( 'NO_DB' , False ) and not no_db and models : # TODO : shit app . config [ 'DATABASE' ] = env . str ( 'DATABASE_URL' , 'postgres://postgres@localhost:5432/wol' ) models . db . init_app ( app ) app . register_blueprint ( crud , url_prefix = '/api' ) app . register_blueprint ( pages ) @app . errorhandler ( ValidationError ) def handle_validation ( error : ValidationError ) : response = jsonify ( error . messages ) response . status_code = 400 return response @app . errorhandler ( NotImplementedError ) def handle_not_implemented ( _error : NotImplementedError ) : return Response ( status = 501 ) return app # TODO : catch 404 ?","title":"create_app"},{"location":"reference/wol/wsgi/#dev_server","text":"def dev_server ( ) View Source def dev_server (): parser = ArgumentParser ( auto_env_var_prefix = 'WOL_' , formatter_class = ArgumentDefaultsHelpFormatter , ) parser . add_argument ( '--bind' , '-b' , default = '127.0.0.1' , help = \"ip address to listen\" ) parser . add_argument ( '--port' , '-p' , default = 5000 , help = \"port to listen\" ) parser . add_argument ( '--debug' , '-d' , action = 'store_true' , default = False , help = \"run in debug mode\" ) parser . add_argument ( '--no-db' , action = 'store_true' , default = False , help = \"do not use database and disable CRUD api\" ) parser . add_argument ( 'command' , choices = ( 'run' , 'initdb' ), nargs = '?' , default = 'run' ) args = parser . parse_args () app = create_app ( no_db = args . no_db ) if args . command == 'run' : app . run ( host = args . bind , port = args . port , debug = args . debug ) elif args . command == 'initdb' : if args . no_db : print ( \"incompatible command and \\\" --no-db \\\" argument\" ) sys . exit ( 1 ) elif not models : print ( \"database deps is not installed (extra \\\" db \\\" \" ) sys . exit ( 1 ) else : models . init_db () print ( \"db initialized\" )","title":"dev_server"},{"location":"reference/wol/logic/","text":"Module wol.logic None None Sub-modules wol.logic.core wol.logic.crud","title":"Index"},{"location":"reference/wol/logic/#module-wollogic","text":"None None","title":"Module wol.logic"},{"location":"reference/wol/logic/#sub-modules","text":"wol.logic.core wol.logic.crud","title":"Sub-modules"},{"location":"reference/wol/logic/core/","text":"Module wol.logic.core None None View Source import operator import os import subprocess # noqa: S404 from dataclasses import dataclass from numbers import Number from typing import ( Callable , Dict , Iterable , List , NamedTuple , Optional , ) from wakeonlan import send_magic_packet try : from functools import singledispatchmethod except ImportError : from singledispatchmethod import singledispatchmethod try : import scapy import scapy.config import scapy.route import scapy.utils from scapy.layers.inet import IP , TCP from scapy.layers.l2 import arping from scapy.sendrecv import sr1 except Exception : scapy = None else : scapy . config . conf . verb = 0 try : import fabric except ImportError : fabric = None else : from paramiko.ssh_exception import NoValidConnectionsError , SSHException from ..doc_utils import exclude_parent_attrs __all__ = [ 'CpuStat' , 'SshCredentials' , 'check_host' , 'reboot_host' , 'get_cpu_stat' , 'wakeup_host' , 'RemoteExecError' , 'scan_local_net' , 'shutdown_host' ] ERROR_NOT_CONNECTED = 0 ERROR_SSH = 1 ERROR_EXEC = 2 class OperableNamedTuple ( NamedTuple ): @singledispatchmethod def _do_op ( self , other , op ): raise TypeError @_do_op . register ( list ) @_do_op . register ( set ) @_do_op . register ( tuple ) def _do_op_multiple ( self , other : Iterable , op : Callable [[ Number , Number ], Number ]): return self . _make ([ op ( a , b ) for a , b in zip ( self , other )]) @_do_op . register ( int ) @_do_op . register ( float ) def _do_op_single ( self , other : Number , op : Callable [[ Number , Number ], Number ]): return self . _make ([ op ( i , other ) for i in self ]) def __sub__ ( self , other ): return self . _do_op ( other , operator . sub ) def __add__ ( self , other ): return self . _do_op ( other , operator . add ) def __mul__ ( self , other ): return self . _do_op ( other , operator . mul ) def __truediv__ ( self , other ): return self . _do_op ( other , operator . truediv ) def __round__ ( self , num : Optional [ int ] = None ): return self . _do_op ( num , round ) # can't inherit only OperableNamedTuple or OperableNamedTuple with NamedTuple class CpuStatShortBase ( NamedTuple ): user : float system : float idle : float iowait : float class CpuStatShort ( CpuStatShortBase , OperableNamedTuple ): pass class CpuStatBase ( NamedTuple ): \"\"\"CPU load representation.\"\"\" user : float nice : float system : float idle : float iowait : float irq : float softirq : float steal : float guest : float guest_nice : float def short ( self ) -> CpuStatShort : return CpuStatShort ( user = self . user + self . nice , system = self . system , idle = self . idle , iowait = self . iowait ) # noqa # TODO: charm, wtf? class CpuStat ( CpuStatBase , OperableNamedTuple ): pass @dataclass class SshCredentials : host : str login : Optional [ str ] password : Optional [ str ] port : Optional [ int ] = 22 class RemoteExecError ( Exception ): \"\"\"exception while performing remote operation, e.g. reboot.\"\"\" def __init__ ( self , code : int , reason : str , details : Optional [ any ] = None ): self . code = code self . reason = reason self . details = details def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {}, } @dataclass class RemoteExecResult : stdout : str stderr : str exit_code : int if fabric : def _remote_exec_command ( creds : SshCredentials , command : str , sudo : bool = False ) -> RemoteExecResult : try : with fabric . Connection ( creds . host , creds . login , creds . port , connect_kwargs = { 'password' : creds . password }) as c : if sudo : res = c . sudo ( command , warn = True , hide = True , password = creds . password ) else : res = c . run ( command , warn = True , hide = True ) except NoValidConnectionsError : raise RemoteExecError ( ERROR_NOT_CONNECTED , \"can't connect to host\" ) except SSHException as e : raise RemoteExecError ( ERROR_SSH , \"ssh exception\" , vars ( e )) if res . exited : raise RemoteExecError ( ERROR_EXEC , \"can't exec command\" , { 'out' : res . stdout , 'err' : res . stderr }) return RemoteExecResult ( stdout = res . stdout , stderr = res . stderr , exit_code = res . exited ) else : def _remote_exec_command ( * args , ** kwargs ): raise NotImplementedError def get_cpu_stat ( creds : SshCredentials , precision : Optional [ int ] = None ) -> CpuStat : # TODO: add memory information cmd = 'head -1 /proc/stat && sleep 1 > /dev/null && head -1 /proc/stat' res = _remote_exec_command ( creds , cmd ) l1 , l2 , * _ = res . stdout . split ( ' \\n ' ) stat = _get_delta_from_str ( l1 , l2 ) if precision : stat = round ( stat , precision ) return stat def _get_delta_from_str ( s1 : str , s2 : str ) -> CpuStat : measure1 = CpuStat ( * map ( int , s1 . split ()[ 1 :])) measure2 = CpuStat ( * map ( int , s2 . split ()[ 1 :])) diff = measure2 - measure1 full = sum ( measure2 ) - sum ( measure1 ) return diff / full * 100 def _can_use_scapy () -> bool : return os . geteuid () == 0 and scapy is not None def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool : if _can_use_scapy (): return check_host_scapy ( host , port = port ) return check_host_ping ( host ) def check_host_scapy ( host : str , port : Optional [ int ] = 80 ) -> bool : \"\"\"check by SYN/ACK to specified port.\"\"\" packet = IP ( dst = host ) / TCP ( dport = port or 80 ) response = sr1 ( packet , timeout = 15 ) return response is not None def check_host_ping ( host : str ) -> bool : cmd = [ 'ping' , '-c' , '1' , '-W' , '2' , host ] proc = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE , text = True ) # noqa: S603 proc . communicate () return proc . returncode == 0 def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None : # scapy: # from scapy.sendrecv import send # from scapy.layers.inet import IP, UDP # magic = bytes.fromhex(mac.replace(':', '') # start = bytes.fromhex('FF')*6 # packet = IP(dst=host) / UDP(dport=port) / (start + magic*16) # send(packet) send_magic_packet ( mac , ip_address = host , port = port ) def reboot_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'reboot' , sudo ) def shutdown_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'shutdown now' , sudo ) def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict [ str , str ]]: \"\"\"get hosts (ip, mac) from local net by ARP protocol.\"\"\" # TODO: select network interface w/o mask - get mask from adapter # TODO: select network interface by unique prefix # TODO: error, if net is not provided and multiple interfaces found if not _can_use_scapy (): raise NotImplementedError if not net : net = get_net () ans , _ = arping ( net ) hosts = [{ 'ip' : r . psrc , 'mac' : r . hwsrc } for _ , r in ans . res ] return hosts def get_net () -> str : \"\"\"find network interface/mask, that has access to the Internet.\"\"\" # TODO: need rework # can find multiple interfaces for network , netmask , _ , interface , address , _ in scapy . config . conf . route . routes : if network == 0 or interface == 'lo' or address in ( '127.0.0.1' , '0.0.0.0' ): # noqa: S104 continue if netmask <= 0 or netmask == 0xFFFFFFFF : continue if interface . startswith ( 'docker' ) or interface . startswith ( 'br-' ): continue addr_num = scapy . utils . atol ( address ) if addr_num & netmask != network : continue net = scapy . utils . ltoa ( network ) mask = bin ( netmask ) . count ( '1' ) return f ' { net } / { mask } ' exclude_parent_attrs ( CpuStat ) exclude_parent_attrs ( RemoteExecError ) Functions check_host def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool View Source def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool : if _can_use_scapy () : return check_host_scapy ( host , port = port ) return check_host_ping ( host ) get_cpu_stat def get_cpu_stat ( creds : wol . logic . core . SshCredentials , precision : Optional [ int ] = None ) -> wol . logic . core . CpuStat View Source def get_cpu_stat ( creds : SshCredentials , precision : Optional [ int ] = None ) -> CpuStat : # TODO : add memory information cmd = 'head -1 /proc/stat && sleep 1 > /dev/null && head -1 /proc/stat' res = _remote_exec_command ( creds , cmd ) l1 , l2 , * _ = res . stdout . split ( '\\n' ) stat = _get_delta_from_str ( l1 , l2 ) if precision : stat = round ( stat , precision ) return stat reboot_host def reboot_host ( creds : wol . logic . core . SshCredentials , sudo : bool = True ) -> None View Source def reboot_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'reboot' , sudo ) scan_local_net def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict [ str , str ]] get hosts (ip, mac) from local net by ARP protocol. View Source def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict[str, str ] ]: \"\"\"get hosts (ip, mac) from local net by ARP protocol.\"\"\" # TODO : select network interface w / o mask - get mask from adapter # TODO : select network interface by unique prefix # TODO : error , if net is not provided and multiple interfaces found if not _can_use_scapy () : raise NotImplementedError if not net : net = get_net () ans , _ = arping ( net ) hosts = [ {'ip': r.psrc, 'mac': r.hwsrc} for _, r in ans.res ] return hosts shutdown_host def shutdown_host ( creds : wol . logic . core . SshCredentials , sudo : bool = True ) -> None View Source def shutdown_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'shutdown now' , sudo ) wakeup_host def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None View Source def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None : # scapy: # from scapy.sendrecv import send # from scapy.layers.inet import IP, UDP # magic = bytes.fromhex(mac.replace(':', '') # start = bytes.fromhex('FF')*6 # packet = IP(dst=host) / UDP(dport=port) / (start + magic*16) # send(packet) send_magic_packet ( mac , ip_address = host , port = port ) Classes CpuStat class CpuStat ( / , * args , ** kwargs ) View Source class CpuStat ( CpuStatBase , OperableNamedTuple ): pass Ancestors (in MRO) wol.logic.core.CpuStatBase wol.logic.core.OperableNamedTuple builtins.tuple RemoteExecError class RemoteExecError ( code : int , reason : str , details : Optional [ < built - in function any > ] = None ) View Source class RemoteExecError ( Exception ) : \"\"\"exception while performing remote operation, e.g. reboot.\"\"\" def __init__ ( self , code : int , reason : str , details : Optional [ any ] = None ) : self . code = code self . reason = reason self . details = details def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {} , } Ancestors (in MRO) builtins.Exception builtins.BaseException Methods as_dict def as_dict ( self ) -> dict View Source def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {}, } SshCredentials class SshCredentials ( host : str , login : Optional [ str ], password : Optional [ str ], port : Optional [ int ] = 22 ) View Source @dataclass class SshCredentials : host : str login : Optional [ str ] password : Optional [ str ] port : Optional [ int ] = 22 Class variables port","title":"Core"},{"location":"reference/wol/logic/core/#module-wollogiccore","text":"None None View Source import operator import os import subprocess # noqa: S404 from dataclasses import dataclass from numbers import Number from typing import ( Callable , Dict , Iterable , List , NamedTuple , Optional , ) from wakeonlan import send_magic_packet try : from functools import singledispatchmethod except ImportError : from singledispatchmethod import singledispatchmethod try : import scapy import scapy.config import scapy.route import scapy.utils from scapy.layers.inet import IP , TCP from scapy.layers.l2 import arping from scapy.sendrecv import sr1 except Exception : scapy = None else : scapy . config . conf . verb = 0 try : import fabric except ImportError : fabric = None else : from paramiko.ssh_exception import NoValidConnectionsError , SSHException from ..doc_utils import exclude_parent_attrs __all__ = [ 'CpuStat' , 'SshCredentials' , 'check_host' , 'reboot_host' , 'get_cpu_stat' , 'wakeup_host' , 'RemoteExecError' , 'scan_local_net' , 'shutdown_host' ] ERROR_NOT_CONNECTED = 0 ERROR_SSH = 1 ERROR_EXEC = 2 class OperableNamedTuple ( NamedTuple ): @singledispatchmethod def _do_op ( self , other , op ): raise TypeError @_do_op . register ( list ) @_do_op . register ( set ) @_do_op . register ( tuple ) def _do_op_multiple ( self , other : Iterable , op : Callable [[ Number , Number ], Number ]): return self . _make ([ op ( a , b ) for a , b in zip ( self , other )]) @_do_op . register ( int ) @_do_op . register ( float ) def _do_op_single ( self , other : Number , op : Callable [[ Number , Number ], Number ]): return self . _make ([ op ( i , other ) for i in self ]) def __sub__ ( self , other ): return self . _do_op ( other , operator . sub ) def __add__ ( self , other ): return self . _do_op ( other , operator . add ) def __mul__ ( self , other ): return self . _do_op ( other , operator . mul ) def __truediv__ ( self , other ): return self . _do_op ( other , operator . truediv ) def __round__ ( self , num : Optional [ int ] = None ): return self . _do_op ( num , round ) # can't inherit only OperableNamedTuple or OperableNamedTuple with NamedTuple class CpuStatShortBase ( NamedTuple ): user : float system : float idle : float iowait : float class CpuStatShort ( CpuStatShortBase , OperableNamedTuple ): pass class CpuStatBase ( NamedTuple ): \"\"\"CPU load representation.\"\"\" user : float nice : float system : float idle : float iowait : float irq : float softirq : float steal : float guest : float guest_nice : float def short ( self ) -> CpuStatShort : return CpuStatShort ( user = self . user + self . nice , system = self . system , idle = self . idle , iowait = self . iowait ) # noqa # TODO: charm, wtf? class CpuStat ( CpuStatBase , OperableNamedTuple ): pass @dataclass class SshCredentials : host : str login : Optional [ str ] password : Optional [ str ] port : Optional [ int ] = 22 class RemoteExecError ( Exception ): \"\"\"exception while performing remote operation, e.g. reboot.\"\"\" def __init__ ( self , code : int , reason : str , details : Optional [ any ] = None ): self . code = code self . reason = reason self . details = details def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {}, } @dataclass class RemoteExecResult : stdout : str stderr : str exit_code : int if fabric : def _remote_exec_command ( creds : SshCredentials , command : str , sudo : bool = False ) -> RemoteExecResult : try : with fabric . Connection ( creds . host , creds . login , creds . port , connect_kwargs = { 'password' : creds . password }) as c : if sudo : res = c . sudo ( command , warn = True , hide = True , password = creds . password ) else : res = c . run ( command , warn = True , hide = True ) except NoValidConnectionsError : raise RemoteExecError ( ERROR_NOT_CONNECTED , \"can't connect to host\" ) except SSHException as e : raise RemoteExecError ( ERROR_SSH , \"ssh exception\" , vars ( e )) if res . exited : raise RemoteExecError ( ERROR_EXEC , \"can't exec command\" , { 'out' : res . stdout , 'err' : res . stderr }) return RemoteExecResult ( stdout = res . stdout , stderr = res . stderr , exit_code = res . exited ) else : def _remote_exec_command ( * args , ** kwargs ): raise NotImplementedError def get_cpu_stat ( creds : SshCredentials , precision : Optional [ int ] = None ) -> CpuStat : # TODO: add memory information cmd = 'head -1 /proc/stat && sleep 1 > /dev/null && head -1 /proc/stat' res = _remote_exec_command ( creds , cmd ) l1 , l2 , * _ = res . stdout . split ( ' \\n ' ) stat = _get_delta_from_str ( l1 , l2 ) if precision : stat = round ( stat , precision ) return stat def _get_delta_from_str ( s1 : str , s2 : str ) -> CpuStat : measure1 = CpuStat ( * map ( int , s1 . split ()[ 1 :])) measure2 = CpuStat ( * map ( int , s2 . split ()[ 1 :])) diff = measure2 - measure1 full = sum ( measure2 ) - sum ( measure1 ) return diff / full * 100 def _can_use_scapy () -> bool : return os . geteuid () == 0 and scapy is not None def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool : if _can_use_scapy (): return check_host_scapy ( host , port = port ) return check_host_ping ( host ) def check_host_scapy ( host : str , port : Optional [ int ] = 80 ) -> bool : \"\"\"check by SYN/ACK to specified port.\"\"\" packet = IP ( dst = host ) / TCP ( dport = port or 80 ) response = sr1 ( packet , timeout = 15 ) return response is not None def check_host_ping ( host : str ) -> bool : cmd = [ 'ping' , '-c' , '1' , '-W' , '2' , host ] proc = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE , text = True ) # noqa: S603 proc . communicate () return proc . returncode == 0 def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None : # scapy: # from scapy.sendrecv import send # from scapy.layers.inet import IP, UDP # magic = bytes.fromhex(mac.replace(':', '') # start = bytes.fromhex('FF')*6 # packet = IP(dst=host) / UDP(dport=port) / (start + magic*16) # send(packet) send_magic_packet ( mac , ip_address = host , port = port ) def reboot_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'reboot' , sudo ) def shutdown_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'shutdown now' , sudo ) def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict [ str , str ]]: \"\"\"get hosts (ip, mac) from local net by ARP protocol.\"\"\" # TODO: select network interface w/o mask - get mask from adapter # TODO: select network interface by unique prefix # TODO: error, if net is not provided and multiple interfaces found if not _can_use_scapy (): raise NotImplementedError if not net : net = get_net () ans , _ = arping ( net ) hosts = [{ 'ip' : r . psrc , 'mac' : r . hwsrc } for _ , r in ans . res ] return hosts def get_net () -> str : \"\"\"find network interface/mask, that has access to the Internet.\"\"\" # TODO: need rework # can find multiple interfaces for network , netmask , _ , interface , address , _ in scapy . config . conf . route . routes : if network == 0 or interface == 'lo' or address in ( '127.0.0.1' , '0.0.0.0' ): # noqa: S104 continue if netmask <= 0 or netmask == 0xFFFFFFFF : continue if interface . startswith ( 'docker' ) or interface . startswith ( 'br-' ): continue addr_num = scapy . utils . atol ( address ) if addr_num & netmask != network : continue net = scapy . utils . ltoa ( network ) mask = bin ( netmask ) . count ( '1' ) return f ' { net } / { mask } ' exclude_parent_attrs ( CpuStat ) exclude_parent_attrs ( RemoteExecError )","title":"Module wol.logic.core"},{"location":"reference/wol/logic/core/#functions","text":"","title":"Functions"},{"location":"reference/wol/logic/core/#check_host","text":"def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool View Source def check_host ( host : str , port : Optional [ int ] = 80 ) -> bool : if _can_use_scapy () : return check_host_scapy ( host , port = port ) return check_host_ping ( host )","title":"check_host"},{"location":"reference/wol/logic/core/#get_cpu_stat","text":"def get_cpu_stat ( creds : wol . logic . core . SshCredentials , precision : Optional [ int ] = None ) -> wol . logic . core . CpuStat View Source def get_cpu_stat ( creds : SshCredentials , precision : Optional [ int ] = None ) -> CpuStat : # TODO : add memory information cmd = 'head -1 /proc/stat && sleep 1 > /dev/null && head -1 /proc/stat' res = _remote_exec_command ( creds , cmd ) l1 , l2 , * _ = res . stdout . split ( '\\n' ) stat = _get_delta_from_str ( l1 , l2 ) if precision : stat = round ( stat , precision ) return stat","title":"get_cpu_stat"},{"location":"reference/wol/logic/core/#reboot_host","text":"def reboot_host ( creds : wol . logic . core . SshCredentials , sudo : bool = True ) -> None View Source def reboot_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'reboot' , sudo )","title":"reboot_host"},{"location":"reference/wol/logic/core/#scan_local_net","text":"def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict [ str , str ]] get hosts (ip, mac) from local net by ARP protocol. View Source def scan_local_net ( net : Optional [ str ] = None ) -> List [ Dict[str, str ] ]: \"\"\"get hosts (ip, mac) from local net by ARP protocol.\"\"\" # TODO : select network interface w / o mask - get mask from adapter # TODO : select network interface by unique prefix # TODO : error , if net is not provided and multiple interfaces found if not _can_use_scapy () : raise NotImplementedError if not net : net = get_net () ans , _ = arping ( net ) hosts = [ {'ip': r.psrc, 'mac': r.hwsrc} for _, r in ans.res ] return hosts","title":"scan_local_net"},{"location":"reference/wol/logic/core/#shutdown_host","text":"def shutdown_host ( creds : wol . logic . core . SshCredentials , sudo : bool = True ) -> None View Source def shutdown_host ( creds : SshCredentials , sudo : bool = True ) -> None : _remote_exec_command ( creds , 'shutdown now' , sudo )","title":"shutdown_host"},{"location":"reference/wol/logic/core/#wakeup_host","text":"def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None View Source def wakeup_host ( mac : str , host : str = '255.255.255.255' , port : int = 9 ) -> None : # scapy: # from scapy.sendrecv import send # from scapy.layers.inet import IP, UDP # magic = bytes.fromhex(mac.replace(':', '') # start = bytes.fromhex('FF')*6 # packet = IP(dst=host) / UDP(dport=port) / (start + magic*16) # send(packet) send_magic_packet ( mac , ip_address = host , port = port )","title":"wakeup_host"},{"location":"reference/wol/logic/core/#classes","text":"","title":"Classes"},{"location":"reference/wol/logic/core/#cpustat","text":"class CpuStat ( / , * args , ** kwargs ) View Source class CpuStat ( CpuStatBase , OperableNamedTuple ): pass","title":"CpuStat"},{"location":"reference/wol/logic/core/#ancestors-in-mro","text":"wol.logic.core.CpuStatBase wol.logic.core.OperableNamedTuple builtins.tuple","title":"Ancestors (in MRO)"},{"location":"reference/wol/logic/core/#remoteexecerror","text":"class RemoteExecError ( code : int , reason : str , details : Optional [ < built - in function any > ] = None ) View Source class RemoteExecError ( Exception ) : \"\"\"exception while performing remote operation, e.g. reboot.\"\"\" def __init__ ( self , code : int , reason : str , details : Optional [ any ] = None ) : self . code = code self . reason = reason self . details = details def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {} , }","title":"RemoteExecError"},{"location":"reference/wol/logic/core/#ancestors-in-mro_1","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/wol/logic/core/#methods","text":"","title":"Methods"},{"location":"reference/wol/logic/core/#as_dict","text":"def as_dict ( self ) -> dict View Source def as_dict ( self ) -> dict : return { 'code' : self . code , 'reason' : self . reason , 'details' : self . details or {}, }","title":"as_dict"},{"location":"reference/wol/logic/core/#sshcredentials","text":"class SshCredentials ( host : str , login : Optional [ str ], password : Optional [ str ], port : Optional [ int ] = 22 ) View Source @dataclass class SshCredentials : host : str login : Optional [ str ] password : Optional [ str ] port : Optional [ int ] = 22","title":"SshCredentials"},{"location":"reference/wol/logic/core/#class-variables","text":"port","title":"Class variables"},{"location":"reference/wol/logic/crud/","text":"Module wol.logic.crud None None View Source from typing import List , Optional from flask import abort , make_response from marshmallow import Schema , fields from peewee import JOIN from playhouse.flask_utils import get_object_or_404 from ..doc_utils import exclude_parent_attrs from ..fields import HostField , MacField , PortField from ..models import Credentials , Target from .core import check_host , wakeup_host __all__ = [ 'create_target' , 'get_target_by_id' , 'get_all_targets' , 'delete_target_by_id' , 'get_target_by_name' , 'edit_target_by_id' , 'wakeup_target_by_id' , 'check_target_by_id' , 'create_credentials' , 'get_credentials_by_id' , 'get_all_credentials' , 'delete_credentials_by_id' , 'edit_credentials_by_id' , 'TargetSchema' , 'CredentialsSchema' ] # TODO: drop flask deps class CredentialsSchema ( Schema ): \"\"\"credentials (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 username = fields . Str () password = fields . Str () pkey = fields . Str () class TargetSchema ( Schema ): \"\"\"target (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 name = fields . Str () host = HostField () mac = MacField () wol_port = PortField () credentials = fields . Nested ( CredentialsSchema ()) def _delete_object ( model , id_ : int ) -> None : obj = get_object_or_404 ( model , model . id == id_ ) obj . delete_instance () def _edit_object_by_id ( model , id_ : int , ** kwargs ) -> None : obj = get_object_or_404 ( model , model . id == id_ ) edited_fields = [] for field_name , value in kwargs . items (): field = getattr ( model , field_name ) edited_fields . append ( field ) setattr ( obj , field_name , value ) obj . save ( only = edited_fields ) def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None , ) -> int : target = Target . create ( name = name , host = host , mac = mac , wol_port = wol_port , credentials = credentials ) return target . id def get_target_by_id ( id_ : int ) -> dict : query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . id == id_ ) return TargetSchema () . dump ( target ) def get_target_by_name ( name : str ) -> dict : query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . name == name ) return TargetSchema () . dump ( target ) def get_all_targets () -> List [ dict ]: query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) return TargetSchema ( many = True ) . dump ( query ) def delete_target_by_id ( id_ : int ) -> None : _delete_object ( Target , id_ ) def edit_target_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Target , id_ , ** kwargs ) def wakeup_target_by_id ( id_ : int ) -> None : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . mac : abort ( make_response ({ 'error' : 'empty mac' }, 400 )) wakeup_host ( target . mac , port = target . wol_port ) def check_target_by_id ( id_ : int ) -> bool : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . host : abort ( make_response ({ 'error' : 'empty host' }, 400 )) return check_host ( target . host ) def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None , ) -> int : credentials = Credentials . create ( username = username , password = password , pkey = pkey ) return credentials . id def get_credentials_by_id ( id_ : int ) -> dict : credentials = get_object_or_404 ( Credentials , Credentials . id == id_ ) return CredentialsSchema () . dump ( credentials ) def get_all_credentials () -> List [ dict ]: qs = Credentials . select () return list ( qs . dicts ()) def delete_credentials_by_id ( id_ : int ) -> None : _delete_object ( Credentials , id_ ) def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Credentials , id_ , ** kwargs ) for schema in ( CredentialsSchema , TargetSchema ): exclude_parent_attrs ( schema ) Functions check_target_by_id def check_target_by_id ( id_ : int ) -> bool View Source def check_target_by_id ( id_ : int ) -> bool : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . host : abort ( make_response ({ 'error' : 'empty host' }, 400 )) return check_host ( target . host ) create_credentials def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None ) -> int View Source def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None , ) -> int : credentials = Credentials . create ( username = username , password = password , pkey = pkey ) return credentials . id create_target def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None ) -> int View Source def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None , ) -> int : target = Target . create ( name = name , host = host , mac = mac , wol_port = wol_port , credentials = credentials ) return target . id delete_credentials_by_id def delete_credentials_by_id ( id_ : int ) -> None View Source def delete_credentials_by_id ( id_ : int ) -> None : _delete_object ( Credentials , id_ ) delete_target_by_id def delete_target_by_id ( id_ : int ) -> None View Source def delete_target_by_id ( id_ : int ) -> None : _delete_object ( Target , id_ ) edit_credentials_by_id def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None View Source def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Credentials , id_ , ** kwargs ) edit_target_by_id def edit_target_by_id ( id_ : int , ** kwargs ) -> None View Source def edit_target_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Target , id_ , ** kwargs ) get_all_credentials def get_all_credentials ( ) -> List [ dict ] View Source def get_all_credentials () -> List [ dict ] : qs = Credentials . select () return list ( qs . dicts ()) get_all_targets def get_all_targets ( ) -> List [ dict ] View Source def get_all_targets () -> List [ dict ] : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) return TargetSchema ( many = True ). dump ( query ) get_credentials_by_id def get_credentials_by_id ( id_ : int ) -> dict View Source def get_credentials_by_id ( id_ : int ) -> dict : credentials = get_object_or_404 ( Credentials , Credentials . id == id_ ) return CredentialsSchema (). dump ( credentials ) get_target_by_id def get_target_by_id ( id_ : int ) -> dict View Source def get_target_by_id ( id_ : int ) -> dict : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . id == id_ ) return TargetSchema (). dump ( target ) get_target_by_name def get_target_by_name ( name : str ) -> dict View Source def get_target_by_name ( name : str ) -> dict : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . name == name ) return TargetSchema (). dump ( target ) wakeup_target_by_id def wakeup_target_by_id ( id_ : int ) -> None View Source def wakeup_target_by_id ( id_ : int ) -> None : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . mac : abort ( make_response ({ 'error' : 'empty mac' }, 400 )) wakeup_host ( target . mac , port = target . wol_port ) Classes CredentialsSchema class CredentialsSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) View Source class CredentialsSchema ( Schema ): \"\"\"credentials (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 username = fields . Str () password = fields . Str () pkey = fields . Str () Ancestors (in MRO) marshmallow.schema.Schema marshmallow.base.SchemaABC Class variables id password pkey username TargetSchema class TargetSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) View Source class TargetSchema ( Schema ): \"\"\"target (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 name = fields . Str () host = HostField () mac = MacField () wol_port = PortField () credentials = fields . Nested ( CredentialsSchema ()) Ancestors (in MRO) marshmallow.schema.Schema marshmallow.base.SchemaABC Class variables credentials host id mac name wol_port","title":"Crud"},{"location":"reference/wol/logic/crud/#module-wollogiccrud","text":"None None View Source from typing import List , Optional from flask import abort , make_response from marshmallow import Schema , fields from peewee import JOIN from playhouse.flask_utils import get_object_or_404 from ..doc_utils import exclude_parent_attrs from ..fields import HostField , MacField , PortField from ..models import Credentials , Target from .core import check_host , wakeup_host __all__ = [ 'create_target' , 'get_target_by_id' , 'get_all_targets' , 'delete_target_by_id' , 'get_target_by_name' , 'edit_target_by_id' , 'wakeup_target_by_id' , 'check_target_by_id' , 'create_credentials' , 'get_credentials_by_id' , 'get_all_credentials' , 'delete_credentials_by_id' , 'edit_credentials_by_id' , 'TargetSchema' , 'CredentialsSchema' ] # TODO: drop flask deps class CredentialsSchema ( Schema ): \"\"\"credentials (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 username = fields . Str () password = fields . Str () pkey = fields . Str () class TargetSchema ( Schema ): \"\"\"target (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 name = fields . Str () host = HostField () mac = MacField () wol_port = PortField () credentials = fields . Nested ( CredentialsSchema ()) def _delete_object ( model , id_ : int ) -> None : obj = get_object_or_404 ( model , model . id == id_ ) obj . delete_instance () def _edit_object_by_id ( model , id_ : int , ** kwargs ) -> None : obj = get_object_or_404 ( model , model . id == id_ ) edited_fields = [] for field_name , value in kwargs . items (): field = getattr ( model , field_name ) edited_fields . append ( field ) setattr ( obj , field_name , value ) obj . save ( only = edited_fields ) def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None , ) -> int : target = Target . create ( name = name , host = host , mac = mac , wol_port = wol_port , credentials = credentials ) return target . id def get_target_by_id ( id_ : int ) -> dict : query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . id == id_ ) return TargetSchema () . dump ( target ) def get_target_by_name ( name : str ) -> dict : query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . name == name ) return TargetSchema () . dump ( target ) def get_all_targets () -> List [ dict ]: query = Target . select ( Target , Credentials ) . join ( Credentials , JOIN . LEFT_OUTER ) return TargetSchema ( many = True ) . dump ( query ) def delete_target_by_id ( id_ : int ) -> None : _delete_object ( Target , id_ ) def edit_target_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Target , id_ , ** kwargs ) def wakeup_target_by_id ( id_ : int ) -> None : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . mac : abort ( make_response ({ 'error' : 'empty mac' }, 400 )) wakeup_host ( target . mac , port = target . wol_port ) def check_target_by_id ( id_ : int ) -> bool : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . host : abort ( make_response ({ 'error' : 'empty host' }, 400 )) return check_host ( target . host ) def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None , ) -> int : credentials = Credentials . create ( username = username , password = password , pkey = pkey ) return credentials . id def get_credentials_by_id ( id_ : int ) -> dict : credentials = get_object_or_404 ( Credentials , Credentials . id == id_ ) return CredentialsSchema () . dump ( credentials ) def get_all_credentials () -> List [ dict ]: qs = Credentials . select () return list ( qs . dicts ()) def delete_credentials_by_id ( id_ : int ) -> None : _delete_object ( Credentials , id_ ) def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Credentials , id_ , ** kwargs ) for schema in ( CredentialsSchema , TargetSchema ): exclude_parent_attrs ( schema )","title":"Module wol.logic.crud"},{"location":"reference/wol/logic/crud/#functions","text":"","title":"Functions"},{"location":"reference/wol/logic/crud/#check_target_by_id","text":"def check_target_by_id ( id_ : int ) -> bool View Source def check_target_by_id ( id_ : int ) -> bool : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . host : abort ( make_response ({ 'error' : 'empty host' }, 400 )) return check_host ( target . host )","title":"check_target_by_id"},{"location":"reference/wol/logic/crud/#create_credentials","text":"def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None ) -> int View Source def create_credentials ( username : str , password : Optional [ str ] = None , pkey : Optional [ str ] = None , ) -> int : credentials = Credentials . create ( username = username , password = password , pkey = pkey ) return credentials . id","title":"create_credentials"},{"location":"reference/wol/logic/crud/#create_target","text":"def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None ) -> int View Source def create_target ( name : str , host : Optional [ str ] = None , mac : Optional [ str ] = None , wol_port : Optional [ int ] = None , credentials : Optional [ int ] = None , ) -> int : target = Target . create ( name = name , host = host , mac = mac , wol_port = wol_port , credentials = credentials ) return target . id","title":"create_target"},{"location":"reference/wol/logic/crud/#delete_credentials_by_id","text":"def delete_credentials_by_id ( id_ : int ) -> None View Source def delete_credentials_by_id ( id_ : int ) -> None : _delete_object ( Credentials , id_ )","title":"delete_credentials_by_id"},{"location":"reference/wol/logic/crud/#delete_target_by_id","text":"def delete_target_by_id ( id_ : int ) -> None View Source def delete_target_by_id ( id_ : int ) -> None : _delete_object ( Target , id_ )","title":"delete_target_by_id"},{"location":"reference/wol/logic/crud/#edit_credentials_by_id","text":"def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None View Source def edit_credentials_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Credentials , id_ , ** kwargs )","title":"edit_credentials_by_id"},{"location":"reference/wol/logic/crud/#edit_target_by_id","text":"def edit_target_by_id ( id_ : int , ** kwargs ) -> None View Source def edit_target_by_id ( id_ : int , ** kwargs ) -> None : _edit_object_by_id ( Target , id_ , ** kwargs )","title":"edit_target_by_id"},{"location":"reference/wol/logic/crud/#get_all_credentials","text":"def get_all_credentials ( ) -> List [ dict ] View Source def get_all_credentials () -> List [ dict ] : qs = Credentials . select () return list ( qs . dicts ())","title":"get_all_credentials"},{"location":"reference/wol/logic/crud/#get_all_targets","text":"def get_all_targets ( ) -> List [ dict ] View Source def get_all_targets () -> List [ dict ] : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) return TargetSchema ( many = True ). dump ( query )","title":"get_all_targets"},{"location":"reference/wol/logic/crud/#get_credentials_by_id","text":"def get_credentials_by_id ( id_ : int ) -> dict View Source def get_credentials_by_id ( id_ : int ) -> dict : credentials = get_object_or_404 ( Credentials , Credentials . id == id_ ) return CredentialsSchema (). dump ( credentials )","title":"get_credentials_by_id"},{"location":"reference/wol/logic/crud/#get_target_by_id","text":"def get_target_by_id ( id_ : int ) -> dict View Source def get_target_by_id ( id_ : int ) -> dict : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . id == id_ ) return TargetSchema (). dump ( target )","title":"get_target_by_id"},{"location":"reference/wol/logic/crud/#get_target_by_name","text":"def get_target_by_name ( name : str ) -> dict View Source def get_target_by_name ( name : str ) -> dict : query = Target . select ( Target , Credentials ). join ( Credentials , JOIN . LEFT_OUTER ) target = get_object_or_404 ( query , Target . name == name ) return TargetSchema (). dump ( target )","title":"get_target_by_name"},{"location":"reference/wol/logic/crud/#wakeup_target_by_id","text":"def wakeup_target_by_id ( id_ : int ) -> None View Source def wakeup_target_by_id ( id_ : int ) -> None : target = get_object_or_404 ( Target , Target . id == id_ ) if not target . mac : abort ( make_response ({ 'error' : 'empty mac' }, 400 )) wakeup_host ( target . mac , port = target . wol_port )","title":"wakeup_target_by_id"},{"location":"reference/wol/logic/crud/#classes","text":"","title":"Classes"},{"location":"reference/wol/logic/crud/#credentialsschema","text":"class CredentialsSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) View Source class CredentialsSchema ( Schema ): \"\"\"credentials (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 username = fields . Str () password = fields . Str () pkey = fields . Str ()","title":"CredentialsSchema"},{"location":"reference/wol/logic/crud/#ancestors-in-mro","text":"marshmallow.schema.Schema marshmallow.base.SchemaABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/logic/crud/#class-variables","text":"id password pkey username","title":"Class variables"},{"location":"reference/wol/logic/crud/#targetschema","text":"class TargetSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) View Source class TargetSchema ( Schema ): \"\"\"target (de)serialization\"\"\" id = fields . Int ( dump_only = True ) # noqa: A003, VNE003 name = fields . Str () host = HostField () mac = MacField () wol_port = PortField () credentials = fields . Nested ( CredentialsSchema ())","title":"TargetSchema"},{"location":"reference/wol/logic/crud/#ancestors-in-mro_1","text":"marshmallow.schema.Schema marshmallow.base.SchemaABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/logic/crud/#class-variables_1","text":"credentials host id mac name wol_port","title":"Class variables"},{"location":"reference/wol/views/","text":"Module wol.views None None View Source from .core import core try : from .crud import crud from .pages import pages except ImportError : pass __all__ = ( 'core' , 'crud' , 'pages' ) Sub-modules wol.views.core wol.views.crud wol.views.pages Variables core crud pages","title":"Index"},{"location":"reference/wol/views/#module-wolviews","text":"None None View Source from .core import core try : from .crud import crud from .pages import pages except ImportError : pass __all__ = ( 'core' , 'crud' , 'pages' )","title":"Module wol.views"},{"location":"reference/wol/views/#sub-modules","text":"wol.views.core wol.views.crud wol.views.pages","title":"Sub-modules"},{"location":"reference/wol/views/#variables","text":"core crud pages","title":"Variables"},{"location":"reference/wol/views/core/","text":"Module wol.views.core None None View Source from flask import Blueprint from marshmallow import Schema , fields from ..decorators import parse_body from ..fields import ( HostField , IpAddressField , MacField , PortField , ) from ..logic.core import ( RemoteExecError , SshCredentials , check_host , get_cpu_stat , reboot_host , scan_local_net , shutdown_host , wakeup_host , ) core = Blueprint ( 'core' , __name__ ) class SshActionSchema ( Schema ): host = HostField ( required = True ) port = PortField () login = fields . String () password = fields . String () class WakeupSchema ( Schema ): mac = MacField ( required = True ) host = IpAddressField ( missing = '255.255.255.255' ) port = PortField ( missing = 9 ) class CheckHostSchema ( Schema ): host = HostField ( required = True ) @core . route ( '/check_host/' , methods = [ 'POST' ]) @parse_body ( CheckHostSchema ()) def ping ( body : dict ): \"\"\"check, if host online.\"\"\" reached = check_host ( ** body ) return { 'reached' : reached } @core . route ( '/wake/' , methods = [ 'POST' ]) @parse_body ( WakeupSchema ()) def wake ( body : dict ): \"\"\"wakeup host by Wake on Lan.\"\"\" wakeup_host ( ** body ) return '' , 204 @core . route ( '/cpu_stat/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def cpu_stat ( body : dict ): \"\"\"cpu load of remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : stat = get_cpu_stat ( creds , precision = 3 ) except RemoteExecError as e : return e . as_dict (), 400 return stat . _asdict () @core . route ( '/reboot/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def reboot ( body : dict ): \"\"\"reboot the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : reboot_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 @core . route ( '/shutdown/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def shutdown ( body : dict ): \"\"\"immediately shutdown the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : shutdown_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 @core . route ( '/scan_net/' , methods = [ 'POST' ]) def scan_net (): \"\"\"search all hosts in local net.\"\"\" return { 'hosts' : scan_local_net ()} Variables core Functions cpu_stat def cpu_stat ( body : dict ) cpu load of remote host (ssh). View Source @ core . route ( '/cpu_stat/' , methods = [ 'POST' ]) @ parse_body ( SshActionSchema ()) def cpu_stat ( body : dict ): \"\"\"cpu load of remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : stat = get_cpu_stat ( creds , precision = 3 ) except RemoteExecError as e : return e . as_dict (), 400 return stat . _asdict () ping def ping ( body : dict ) check, if host online. View Source @core . route ( '/check_host/' , methods =[ 'POST' ] ) @parse_body ( CheckHostSchema ()) def ping ( body : dict ) : \"\"\"check, if host online.\"\"\" reached = check_host ( ** body ) return { 'reached' : reached } reboot def reboot ( body : dict ) reboot the remote host (ssh). View Source @core . route ( '/reboot/' , methods =[ 'POST' ] ) @parse_body ( SshActionSchema ()) def reboot ( body : dict ) : \"\"\"reboot the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : reboot_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 scan_net def scan_net ( ) search all hosts in local net. View Source @core . route ( '/scan_net/' , methods =[ 'POST' ] ) def scan_net () : \"\"\"search all hosts in local net.\"\"\" return { 'hosts' : scan_local_net () } shutdown def shutdown ( body : dict ) immediately shutdown the remote host (ssh). View Source @core . route ( '/shutdown/' , methods =[ 'POST' ] ) @parse_body ( SshActionSchema ()) def shutdown ( body : dict ) : \"\"\"immediately shutdown the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : shutdown_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 wake def wake ( body : dict ) wakeup host by Wake on Lan. View Source @core . route ( '/wake/' , methods =[ 'POST' ] ) @parse_body ( WakeupSchema ()) def wake ( body : dict ) : \"\"\"wakeup host by Wake on Lan.\"\"\" wakeup_host ( ** body ) return '' , 204 Classes CheckHostSchema class CheckHostSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) Attributes Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class CheckHostSchema ( Schema ): host = HostField ( required = True ) Ancestors (in MRO) marshmallow.schema.Schema marshmallow.base.SchemaABC Class variables Meta OPTIONS_CLASS TYPE_MAPPING error_messages host opts Static methods from_dict def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls Instance variables dict_class set_class Methods dump def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result dumps def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs ) get_attribute def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default ) handle_error def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass load def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True ) loads def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown ) on_bind_field def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None validate def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {} SshActionSchema class SshActionSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) Attributes Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class SshActionSchema ( Schema ): host = HostField ( required = True ) port = PortField () login = fields . String () password = fields . String () Ancestors (in MRO) marshmallow.schema.Schema marshmallow.base.SchemaABC Class variables Meta OPTIONS_CLASS TYPE_MAPPING error_messages host login opts password port Static methods from_dict def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls Instance variables dict_class set_class Methods dump def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result dumps def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs ) get_attribute def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default ) handle_error def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass load def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True ) loads def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown ) on_bind_field def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None validate def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {} WakeupSchema class WakeupSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None ) Attributes Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class WakeupSchema ( Schema ): mac = MacField ( required = True ) host = IpAddressField ( missing = '255.255.255.255' ) port = PortField ( missing = 9 ) Ancestors (in MRO) marshmallow.schema.Schema marshmallow.base.SchemaABC Class variables Meta OPTIONS_CLASS TYPE_MAPPING error_messages host mac opts port Static methods from_dict def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls Instance variables dict_class set_class Methods dump def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result dumps def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs ) get_attribute def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default ) handle_error def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass load def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True ) loads def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown ) on_bind_field def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None validate def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {}","title":"Core"},{"location":"reference/wol/views/core/#module-wolviewscore","text":"None None View Source from flask import Blueprint from marshmallow import Schema , fields from ..decorators import parse_body from ..fields import ( HostField , IpAddressField , MacField , PortField , ) from ..logic.core import ( RemoteExecError , SshCredentials , check_host , get_cpu_stat , reboot_host , scan_local_net , shutdown_host , wakeup_host , ) core = Blueprint ( 'core' , __name__ ) class SshActionSchema ( Schema ): host = HostField ( required = True ) port = PortField () login = fields . String () password = fields . String () class WakeupSchema ( Schema ): mac = MacField ( required = True ) host = IpAddressField ( missing = '255.255.255.255' ) port = PortField ( missing = 9 ) class CheckHostSchema ( Schema ): host = HostField ( required = True ) @core . route ( '/check_host/' , methods = [ 'POST' ]) @parse_body ( CheckHostSchema ()) def ping ( body : dict ): \"\"\"check, if host online.\"\"\" reached = check_host ( ** body ) return { 'reached' : reached } @core . route ( '/wake/' , methods = [ 'POST' ]) @parse_body ( WakeupSchema ()) def wake ( body : dict ): \"\"\"wakeup host by Wake on Lan.\"\"\" wakeup_host ( ** body ) return '' , 204 @core . route ( '/cpu_stat/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def cpu_stat ( body : dict ): \"\"\"cpu load of remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : stat = get_cpu_stat ( creds , precision = 3 ) except RemoteExecError as e : return e . as_dict (), 400 return stat . _asdict () @core . route ( '/reboot/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def reboot ( body : dict ): \"\"\"reboot the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : reboot_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 @core . route ( '/shutdown/' , methods = [ 'POST' ]) @parse_body ( SshActionSchema ()) def shutdown ( body : dict ): \"\"\"immediately shutdown the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : shutdown_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204 @core . route ( '/scan_net/' , methods = [ 'POST' ]) def scan_net (): \"\"\"search all hosts in local net.\"\"\" return { 'hosts' : scan_local_net ()}","title":"Module wol.views.core"},{"location":"reference/wol/views/core/#variables","text":"core","title":"Variables"},{"location":"reference/wol/views/core/#functions","text":"","title":"Functions"},{"location":"reference/wol/views/core/#cpu_stat","text":"def cpu_stat ( body : dict ) cpu load of remote host (ssh). View Source @ core . route ( '/cpu_stat/' , methods = [ 'POST' ]) @ parse_body ( SshActionSchema ()) def cpu_stat ( body : dict ): \"\"\"cpu load of remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : stat = get_cpu_stat ( creds , precision = 3 ) except RemoteExecError as e : return e . as_dict (), 400 return stat . _asdict ()","title":"cpu_stat"},{"location":"reference/wol/views/core/#ping","text":"def ping ( body : dict ) check, if host online. View Source @core . route ( '/check_host/' , methods =[ 'POST' ] ) @parse_body ( CheckHostSchema ()) def ping ( body : dict ) : \"\"\"check, if host online.\"\"\" reached = check_host ( ** body ) return { 'reached' : reached }","title":"ping"},{"location":"reference/wol/views/core/#reboot","text":"def reboot ( body : dict ) reboot the remote host (ssh). View Source @core . route ( '/reboot/' , methods =[ 'POST' ] ) @parse_body ( SshActionSchema ()) def reboot ( body : dict ) : \"\"\"reboot the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : reboot_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204","title":"reboot"},{"location":"reference/wol/views/core/#scan_net","text":"def scan_net ( ) search all hosts in local net. View Source @core . route ( '/scan_net/' , methods =[ 'POST' ] ) def scan_net () : \"\"\"search all hosts in local net.\"\"\" return { 'hosts' : scan_local_net () }","title":"scan_net"},{"location":"reference/wol/views/core/#shutdown","text":"def shutdown ( body : dict ) immediately shutdown the remote host (ssh). View Source @core . route ( '/shutdown/' , methods =[ 'POST' ] ) @parse_body ( SshActionSchema ()) def shutdown ( body : dict ) : \"\"\"immediately shutdown the remote host (ssh).\"\"\" creds = SshCredentials ( ** body ) try : shutdown_host ( creds ) except RemoteExecError as e : return e . as_dict (), 400 return '' , 204","title":"shutdown"},{"location":"reference/wol/views/core/#wake","text":"def wake ( body : dict ) wakeup host by Wake on Lan. View Source @core . route ( '/wake/' , methods =[ 'POST' ] ) @parse_body ( WakeupSchema ()) def wake ( body : dict ) : \"\"\"wakeup host by Wake on Lan.\"\"\" wakeup_host ( ** body ) return '' , 204","title":"wake"},{"location":"reference/wol/views/core/#classes","text":"","title":"Classes"},{"location":"reference/wol/views/core/#checkhostschema","text":"class CheckHostSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None )","title":"CheckHostSchema"},{"location":"reference/wol/views/core/#attributes","text":"Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class CheckHostSchema ( Schema ): host = HostField ( required = True )","title":"Attributes"},{"location":"reference/wol/views/core/#ancestors-in-mro","text":"marshmallow.schema.Schema marshmallow.base.SchemaABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/views/core/#class-variables","text":"Meta OPTIONS_CLASS TYPE_MAPPING error_messages host opts","title":"Class variables"},{"location":"reference/wol/views/core/#static-methods","text":"","title":"Static methods"},{"location":"reference/wol/views/core/#from_dict","text":"def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls","title":"from_dict"},{"location":"reference/wol/views/core/#instance-variables","text":"dict_class set_class","title":"Instance variables"},{"location":"reference/wol/views/core/#methods","text":"","title":"Methods"},{"location":"reference/wol/views/core/#dump","text":"def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result","title":"dump"},{"location":"reference/wol/views/core/#dumps","text":"def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs )","title":"dumps"},{"location":"reference/wol/views/core/#get_attribute","text":"def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default )","title":"get_attribute"},{"location":"reference/wol/views/core/#handle_error","text":"def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass","title":"handle_error"},{"location":"reference/wol/views/core/#load","text":"def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True )","title":"load"},{"location":"reference/wol/views/core/#loads","text":"def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown )","title":"loads"},{"location":"reference/wol/views/core/#on_bind_field","text":"def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None","title":"on_bind_field"},{"location":"reference/wol/views/core/#validate","text":"def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {}","title":"validate"},{"location":"reference/wol/views/core/#sshactionschema","text":"class SshActionSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None )","title":"SshActionSchema"},{"location":"reference/wol/views/core/#attributes_1","text":"Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class SshActionSchema ( Schema ): host = HostField ( required = True ) port = PortField () login = fields . String () password = fields . String ()","title":"Attributes"},{"location":"reference/wol/views/core/#ancestors-in-mro_1","text":"marshmallow.schema.Schema marshmallow.base.SchemaABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/views/core/#class-variables_1","text":"Meta OPTIONS_CLASS TYPE_MAPPING error_messages host login opts password port","title":"Class variables"},{"location":"reference/wol/views/core/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/wol/views/core/#from_dict_1","text":"def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls","title":"from_dict"},{"location":"reference/wol/views/core/#instance-variables_1","text":"dict_class set_class","title":"Instance variables"},{"location":"reference/wol/views/core/#methods_1","text":"","title":"Methods"},{"location":"reference/wol/views/core/#dump_1","text":"def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result","title":"dump"},{"location":"reference/wol/views/core/#dumps_1","text":"def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs )","title":"dumps"},{"location":"reference/wol/views/core/#get_attribute_1","text":"def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default )","title":"get_attribute"},{"location":"reference/wol/views/core/#handle_error_1","text":"def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass","title":"handle_error"},{"location":"reference/wol/views/core/#load_1","text":"def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True )","title":"load"},{"location":"reference/wol/views/core/#loads_1","text":"def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown )","title":"loads"},{"location":"reference/wol/views/core/#on_bind_field_1","text":"def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None","title":"on_bind_field"},{"location":"reference/wol/views/core/#validate_1","text":"def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {}","title":"validate"},{"location":"reference/wol/views/core/#wakeupschema","text":"class WakeupSchema ( * , only : Union [ Sequence [ str ], Set [ str ], NoneType ] = None , exclude : Union [ Sequence [ str ], Set [ str ]] = (), many : bool = False , context : Optional [ Dict ] = None , load_only : Union [ Sequence [ str ], Set [ str ]] = (), dump_only : Union [ Sequence [ str ], Set [ str ]] = (), partial : Union [ bool , Sequence [ str ], Set [ str ]] = False , unknown : Optional [ str ] = None )","title":"WakeupSchema"},{"location":"reference/wol/views/core/#attributes_2","text":"Name Type Description Default only None Whitelist of the declared fields to select when instantiating the Schema. If None, all fields are used. Nested fields can be represented with dot delimiters. None exclude None Blacklist of the declared fields to exclude when instantiating the Schema. If a field appears in both only and exclude , it is not used. Nested fields can be represented with dot delimiters. None many None Should be set to True if obj is a collection so that the object will be serialized to a list. None context None Optional context passed to :class: fields.Method and :class: fields.Function fields. None load_only None Fields to skip during serialization (write-only fields) None dump_only None Fields to skip during deserialization (read-only fields) None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . .. versionchanged:: 3.0.0 prefix parameter removed. .. versionchanged:: 2.0.0 __validators__ , __preprocessors__ , and __data_handlers__ are removed in favor of marshmallow.decorators.validates_schema , marshmallow.decorators.pre_load and marshmallow.decorators.post_dump . __accessor__ and __error_handler__ are deprecated. Implement the handle_error and get_attribute methods instead. | None | View Source class WakeupSchema ( Schema ): mac = MacField ( required = True ) host = IpAddressField ( missing = '255.255.255.255' ) port = PortField ( missing = 9 )","title":"Attributes"},{"location":"reference/wol/views/core/#ancestors-in-mro_2","text":"marshmallow.schema.Schema marshmallow.base.SchemaABC","title":"Ancestors (in MRO)"},{"location":"reference/wol/views/core/#class-variables_2","text":"Meta OPTIONS_CLASS TYPE_MAPPING error_messages host mac opts port","title":"Class variables"},{"location":"reference/wol/views/core/#static-methods_2","text":"","title":"Static methods"},{"location":"reference/wol/views/core/#from_dict_2","text":"def from_dict ( fields : Dict [ str , Union [ marshmallow . fields . Field , type ]], * , name : str = 'GeneratedSchema' ) -> type Generate a Schema class given a dictionary of fields. .. code-block:: python from marshmallow import Schema , fields PersonSchema = Schema . from_dict ({ \"name\" : fields . Str ()}) print ( PersonSchema () . load ({ \"name\" : \"David\" })) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in Nested fields. Parameters: Name Type Description Default fields dict Dictionary mapping field names to field instances. None name str Optional name for the class, which will appear in the repr for the class. .. versionadded:: 3.0.0 | None | View Source @classmethod def from_dict ( cls , fields : typing . Dict [ str , typing . Union [ ma_fields . Field , type ]], * , name : str = \"GeneratedSchema\" ) -> type : \"\"\"Generate a `Schema` class given a dictionary of fields. .. code-block:: python from marshmallow import Schema, fields PersonSchema = Schema.from_dict({\"name\": fields.Str()}) print(PersonSchema().load({\"name\": \"David\"})) # => {'name': 'David'} Generated schemas are not added to the class registry and therefore cannot be referred to by name in `Nested` fields. :param dict fields: Dictionary mapping field names to field instances. :param str name: Optional name for the class, which will appear in the ``repr`` for the class. .. versionadded:: 3.0.0 \"\"\" attrs = fields . copy () attrs [ \"Meta\" ] = type ( \"GeneratedMeta\" , ( getattr ( cls , \"Meta\" , object ),), { \"register\" : False } ) schema_cls = type ( name , ( cls ,), attrs ) return schema_cls","title":"from_dict"},{"location":"reference/wol/views/core/#instance-variables_2","text":"dict_class set_class","title":"Instance variables"},{"location":"reference/wol/views/core/#methods_2","text":"","title":"Methods"},{"location":"reference/wol/views/core/#dump_2","text":"def dump ( self , obj : Any , * , many : Optional [ bool ] = None ) Serialize an object to native Python data types according to this Schema's fields. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. View Source def dump ( self , obj : typing . Any , * , many : typing . Optional [ bool ] = None ) : \" \"\" Serialize an object to native Python data types according to this Schema's fields. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: Serialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. .. versionchanged:: 3.0.0rc9 Validation no longer occurs upon serialization. \"\" \" many = self . many if many is None else bool ( many ) if self . _has_processors ( PRE_DUMP ) : processed_obj = self . _invoke_dump_processors ( PRE_DUMP , obj , many = many , original_data = obj ) else : processed_obj = obj result = self . _serialize ( processed_obj , many = many ) if self . _has_processors ( POST_DUMP ) : result = self . _invoke_dump_processors ( POST_DUMP , result , many = many , original_data = obj ) return result","title":"dump"},{"location":"reference/wol/views/core/#dumps_2","text":"def dumps ( self , obj : Any , * args , many : Optional [ bool ] = None , ** kwargs ) Same as :meth: dump , except return a JSON-encoded string. Parameters: Name Type Description Default obj None The object to serialize. None many None Whether to serialize obj as a collection. If None , the value for self.many is used. None Returns: Type Description None A json string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if obj is invalid. View Source def dumps ( self , obj : typing . Any , * args , many : typing . Optional [ bool ] = None , ** kwargs ) : \" \"\" Same as :meth:`dump`, except return a JSON-encoded string. :param obj: The object to serialize. :param many: Whether to serialize `obj` as a collection. If `None`, the value for `self.many` is used. :return: A ``json`` string .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the serialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if ``obj`` is invalid. \"\" \" serialized = self . dump ( obj , many = many ) return self . opts . render_module . dumps ( serialized , * args , ** kwargs )","title":"dumps"},{"location":"reference/wol/views/core/#get_attribute_2","text":"def get_attribute ( self , obj : Any , attr : str , default : Any ) Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of obj and attr . View Source def get_attribute ( self , obj : typing . Any , attr : str , default : typing . Any ) : \" \"\" Defines how to pull values from an object to serialize. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0a1 Changed position of ``obj`` and ``attr``. \"\" \" return get_value ( obj , attr , default )","title":"get_attribute"},{"location":"reference/wol/views/core/#handle_error_2","text":"def handle_error ( self , error : marshmallow . exceptions . ValidationError , data : Any , * , many : bool , ** kwargs ) Custom error handler function for the schema. Parameters: Name Type Description Default error None The ValidationError raised during (de)serialization. None data None The original input data. None many None Value of many on dump or load. None partial None Value of partial on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives many and partial (on deserialization) as keyword arguments. | None | View Source def handle_error ( self , error : ValidationError , data : typing . Any , * , many : bool , ** kwargs ) : \" \"\" Custom error handler function for the schema. :param error: The `ValidationError` raised during (de)serialization. :param data: The original input data. :param many: Value of ``many`` on dump or load. :param partial: Value of ``partial`` on load. .. versionadded:: 2.0.0 .. versionchanged:: 3.0.0rc9 Receives `many` and `partial` (on deserialization) as keyword arguments. \"\" \" pass","title":"handle_error"},{"location":"reference/wol/views/core/#load_2","text":"def load ( self , data : Union [ Mapping [ str , Any ], Iterable [ Mapping [ str , Any ]]], * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None ) Deserialize a data structure to an object defined by this Schema's fields. Parameters: Name Type Description Default data None The data to deserialize. None many None Whether to deserialize data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def load ( self , data : typing . Union [ typing . Mapping [ str , typing . Any ] , typing . Iterable [ typing . Mapping [ str , typing . Any ]] , ] , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None ) : \" \"\" Deserialize a data structure to an object defined by this Schema's fields. :param data: The data to deserialize. :param many: Whether to deserialize `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" return self . _do_load ( data , many = many , partial = partial , unknown = unknown , postprocess = True )","title":"load"},{"location":"reference/wol/views/core/#loads_2","text":"def loads ( self , json_data : str , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None , unknown : Optional [ str ] = None , ** kwargs ) Same as :meth: load , except it takes a JSON string as input. Parameters: Name Type Description Default json_data None A JSON string of the data to deserialize. None many None Whether to deserialize obj as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None unknown None Whether to exclude, include, or raise an error for unknown fields in the data. Use EXCLUDE , INCLUDE or RAISE . If None , the value for self.unknown is used. None Returns: Type Description None Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a (data, errors) duple. A :exc: ValidationError <marshmallow.exceptions.ValidationError> is raised if invalid data are passed. View Source def loads ( self , json_data : str , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None , unknown : typing . Optional [ str ] = None , ** kwargs ) : \" \"\" Same as :meth:`load`, except it takes a JSON string as input. :param json_data: A JSON string of the data to deserialize. :param many: Whether to deserialize `obj` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :param unknown: Whether to exclude, include, or raise an error for unknown fields in the data. Use `EXCLUDE`, `INCLUDE` or `RAISE`. If `None`, the value for `self.unknown` is used. :return: Deserialized data .. versionadded:: 1.0.0 .. versionchanged:: 3.0.0b7 This method returns the deserialized data rather than a ``(data, errors)`` duple. A :exc:`ValidationError <marshmallow.exceptions.ValidationError>` is raised if invalid data are passed. \"\" \" data = self . opts . render_module . loads ( json_data , ** kwargs ) return self . load ( data , many = many , partial = partial , unknown = unknown )","title":"loads"},{"location":"reference/wol/views/core/#on_bind_field_2","text":"def on_bind_field ( self , field_name : str , field_obj : marshmallow . fields . Field ) -> None Hook to modify a field when it is bound to the Schema . No-op by default. View Source def on_bind_field ( self , field_name : str , field_obj : ma_fields . Field ) -> None : \" \"\" Hook to modify a field when it is bound to the `Schema`. No-op by default. \"\" \" return None","title":"on_bind_field"},{"location":"reference/wol/views/core/#validate_2","text":"def validate ( self , data : Mapping , * , many : Optional [ bool ] = None , partial : Union [ bool , Sequence [ str ], Set [ str ], NoneType ] = None ) -> Dict [ str , List [ str ]] Validate data against the schema, returning a dictionary of validation errors. Parameters: Name Type Description Default data None The data to validate. None many None Whether to validate data as a collection. If None , the value for self.many is used. None partial None Whether to ignore missing fields and not require any fields declared. Propagates down to Nested fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. None Returns: Type Description None A dictionary of validation errors. .. versionadded:: 1.1.0 View Source def validate ( self , data : typing . Mapping , * , many : typing . Optional [ bool ] = None , partial : typing . Optional [ typing . Union [ bool , types . StrSequenceOrSet ]] = None ) -> typing . Dict [ str , typing . List [ str ]]: \"\"\"Validate `data` against the schema, returning a dictionary of validation errors. :param data: The data to validate. :param many: Whether to validate `data` as a collection. If `None`, the value for `self.many` is used. :param partial: Whether to ignore missing fields and not require any fields declared. Propagates down to ``Nested`` fields as well. If its value is an iterable, only missing fields listed in that iterable will be ignored. Use dot delimiters to specify nested fields. :return: A dictionary of validation errors. .. versionadded:: 1.1.0 \"\"\" try : self . _do_load ( data , many = many , partial = partial , postprocess = False ) except ValidationError as exc : return typing . cast ( typing . Dict [ str , typing . List [ str ]], exc . messages ) return {}","title":"validate"},{"location":"reference/wol/views/crud/","text":"Module wol.views.crud None None View Source from flask import Blueprint , jsonify from ..decorators import parse_body from ..logic.crud import ( CredentialsSchema , TargetSchema , check_target_by_id , create_credentials , create_target , delete_credentials_by_id , delete_target_by_id , edit_credentials_by_id , edit_target_by_id , get_all_credentials , get_all_targets , get_credentials_by_id , get_target_by_id , get_target_by_name , wakeup_target_by_id , ) crud = Blueprint ( 'crud' , __name__ ) @crud . route ( '/targets/' , methods = [ 'GET' ]) def get_targets (): return jsonify ( get_all_targets ()) @crud . route ( '/targets/' , methods = [ 'POST' ]) @parse_body ( TargetSchema ()) def create_target_ ( body : dict ): created = create_target ( ** body ) return { 'id' : created }, 201 @crud . route ( '/targets/<int:pk>/' , methods = [ 'GET' ]) def get_target_by_id_ ( pk : int ): return get_target_by_id ( pk ) @crud . route ( '/targets/<name>/' , methods = [ 'GET' ]) def get_target_by_name_ ( name : str ): return get_target_by_name ( name ) @crud . route ( '/targets/<int:pk>/' , methods = [ 'PUT' , 'PATCH' ]) @parse_body ( TargetSchema ()) def update_target ( pk : int , body : dict ): edit_target_by_id ( pk , ** body ) return '' , 204 @crud . route ( '/targets/<int:pk>/' , methods = [ 'DELETE' ]) def delete_target ( pk : int ): delete_target_by_id ( pk ) return '' , 204 @crud . route ( '/targets/<int:pk>/wake/' , methods = [ 'POST' ]) def wakeup_target ( pk : int ): wakeup_target_by_id ( pk ) return '' , 204 @crud . route ( '/targets/<int:pk>/check/' , methods = [ 'POST' ]) def check_target ( pk : int ): reached = check_target_by_id ( pk ) return { 'reached' : reached } @crud . route ( '/credentials/' , methods = [ 'GET' ]) def get_credentials_list (): return jsonify ( get_all_credentials ()) @crud . route ( '/credentials/' , methods = [ 'POST' ]) @parse_body ( CredentialsSchema ()) def create_credentials_ ( body : dict ): created = create_credentials ( ** body ) return { 'id' : created }, 201 @crud . route ( '/credentials/<int:pk>/' , methods = [ 'GET' ]) def get_credentials ( pk : int ): return get_credentials_by_id ( pk ) @crud . route ( '/credentials/<int:pk>/' , methods = [ 'PUT' , 'PATCH' ]) @parse_body ( CredentialsSchema ()) def update_credentials ( pk : int , body : dict ): edit_credentials_by_id ( pk , ** body ) return '' , 204 @crud . route ( '/credentials/<int:pk>/' , methods = [ 'DELETE' ]) def delete_credentials ( pk : int ): delete_credentials_by_id ( pk ) return '' , 204 Variables crud Functions check_target def check_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/check/' , methods =[ 'POST' ] ) def check_target ( pk : int ) : reached = check_target_by_id ( pk ) return { 'reached' : reached } create_credentials_ def create_credentials_ ( body : dict ) View Source @crud . route ( '/credentials/' , methods =[ 'POST' ] ) @parse_body ( CredentialsSchema ()) def create_credentials_ ( body : dict ) : created = create_credentials ( ** body ) return { 'id' : created } , 201 create_target_ def create_target_ ( body : dict ) View Source @crud . route ( '/targets/' , methods =[ 'POST' ] ) @parse_body ( TargetSchema ()) def create_target_ ( body : dict ) : created = create_target ( ** body ) return { 'id' : created } , 201 delete_credentials def delete_credentials ( pk : int ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'DELETE' ] ) def delete_credentials ( pk : int ) : delete_credentials_by_id ( pk ) return '' , 204 delete_target def delete_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'DELETE' ] ) def delete_target ( pk : int ) : delete_target_by_id ( pk ) return '' , 204 get_credentials def get_credentials ( pk : int ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'GET' ] ) def get_credentials ( pk : int ) : return get_credentials_by_id ( pk ) get_credentials_list def get_credentials_list ( ) View Source @crud . route ( '/credentials/' , methods =[ 'GET' ] ) def get_credentials_list () : return jsonify ( get_all_credentials ()) get_target_by_id_ def get_target_by_id_ ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'GET' ] ) def get_target_by_id_ ( pk : int ) : return get_target_by_id ( pk ) get_target_by_name_ def get_target_by_name_ ( name : str ) View Source @crud . route ( '/targets/<name>/' , methods =[ 'GET' ] ) def get_target_by_name_ ( name : str ) : return get_target_by_name ( name ) get_targets def get_targets ( ) View Source @crud . route ( '/targets/' , methods =[ 'GET' ] ) def get_targets () : return jsonify ( get_all_targets ()) update_credentials def update_credentials ( pk : int , body : dict ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'PUT', 'PATCH' ] ) @parse_body ( CredentialsSchema ()) def update_credentials ( pk : int , body : dict ) : edit_credentials_by_id ( pk , ** body ) return '' , 204 update_target def update_target ( pk : int , body : dict ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'PUT', 'PATCH' ] ) @parse_body ( TargetSchema ()) def update_target ( pk : int , body : dict ) : edit_target_by_id ( pk , ** body ) return '' , 204 wakeup_target def wakeup_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/wake/' , methods =[ 'POST' ] ) def wakeup_target ( pk : int ) : wakeup_target_by_id ( pk ) return '' , 204","title":"Crud"},{"location":"reference/wol/views/crud/#module-wolviewscrud","text":"None None View Source from flask import Blueprint , jsonify from ..decorators import parse_body from ..logic.crud import ( CredentialsSchema , TargetSchema , check_target_by_id , create_credentials , create_target , delete_credentials_by_id , delete_target_by_id , edit_credentials_by_id , edit_target_by_id , get_all_credentials , get_all_targets , get_credentials_by_id , get_target_by_id , get_target_by_name , wakeup_target_by_id , ) crud = Blueprint ( 'crud' , __name__ ) @crud . route ( '/targets/' , methods = [ 'GET' ]) def get_targets (): return jsonify ( get_all_targets ()) @crud . route ( '/targets/' , methods = [ 'POST' ]) @parse_body ( TargetSchema ()) def create_target_ ( body : dict ): created = create_target ( ** body ) return { 'id' : created }, 201 @crud . route ( '/targets/<int:pk>/' , methods = [ 'GET' ]) def get_target_by_id_ ( pk : int ): return get_target_by_id ( pk ) @crud . route ( '/targets/<name>/' , methods = [ 'GET' ]) def get_target_by_name_ ( name : str ): return get_target_by_name ( name ) @crud . route ( '/targets/<int:pk>/' , methods = [ 'PUT' , 'PATCH' ]) @parse_body ( TargetSchema ()) def update_target ( pk : int , body : dict ): edit_target_by_id ( pk , ** body ) return '' , 204 @crud . route ( '/targets/<int:pk>/' , methods = [ 'DELETE' ]) def delete_target ( pk : int ): delete_target_by_id ( pk ) return '' , 204 @crud . route ( '/targets/<int:pk>/wake/' , methods = [ 'POST' ]) def wakeup_target ( pk : int ): wakeup_target_by_id ( pk ) return '' , 204 @crud . route ( '/targets/<int:pk>/check/' , methods = [ 'POST' ]) def check_target ( pk : int ): reached = check_target_by_id ( pk ) return { 'reached' : reached } @crud . route ( '/credentials/' , methods = [ 'GET' ]) def get_credentials_list (): return jsonify ( get_all_credentials ()) @crud . route ( '/credentials/' , methods = [ 'POST' ]) @parse_body ( CredentialsSchema ()) def create_credentials_ ( body : dict ): created = create_credentials ( ** body ) return { 'id' : created }, 201 @crud . route ( '/credentials/<int:pk>/' , methods = [ 'GET' ]) def get_credentials ( pk : int ): return get_credentials_by_id ( pk ) @crud . route ( '/credentials/<int:pk>/' , methods = [ 'PUT' , 'PATCH' ]) @parse_body ( CredentialsSchema ()) def update_credentials ( pk : int , body : dict ): edit_credentials_by_id ( pk , ** body ) return '' , 204 @crud . route ( '/credentials/<int:pk>/' , methods = [ 'DELETE' ]) def delete_credentials ( pk : int ): delete_credentials_by_id ( pk ) return '' , 204","title":"Module wol.views.crud"},{"location":"reference/wol/views/crud/#variables","text":"crud","title":"Variables"},{"location":"reference/wol/views/crud/#functions","text":"","title":"Functions"},{"location":"reference/wol/views/crud/#check_target","text":"def check_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/check/' , methods =[ 'POST' ] ) def check_target ( pk : int ) : reached = check_target_by_id ( pk ) return { 'reached' : reached }","title":"check_target"},{"location":"reference/wol/views/crud/#create_credentials_","text":"def create_credentials_ ( body : dict ) View Source @crud . route ( '/credentials/' , methods =[ 'POST' ] ) @parse_body ( CredentialsSchema ()) def create_credentials_ ( body : dict ) : created = create_credentials ( ** body ) return { 'id' : created } , 201","title":"create_credentials_"},{"location":"reference/wol/views/crud/#create_target_","text":"def create_target_ ( body : dict ) View Source @crud . route ( '/targets/' , methods =[ 'POST' ] ) @parse_body ( TargetSchema ()) def create_target_ ( body : dict ) : created = create_target ( ** body ) return { 'id' : created } , 201","title":"create_target_"},{"location":"reference/wol/views/crud/#delete_credentials","text":"def delete_credentials ( pk : int ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'DELETE' ] ) def delete_credentials ( pk : int ) : delete_credentials_by_id ( pk ) return '' , 204","title":"delete_credentials"},{"location":"reference/wol/views/crud/#delete_target","text":"def delete_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'DELETE' ] ) def delete_target ( pk : int ) : delete_target_by_id ( pk ) return '' , 204","title":"delete_target"},{"location":"reference/wol/views/crud/#get_credentials","text":"def get_credentials ( pk : int ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'GET' ] ) def get_credentials ( pk : int ) : return get_credentials_by_id ( pk )","title":"get_credentials"},{"location":"reference/wol/views/crud/#get_credentials_list","text":"def get_credentials_list ( ) View Source @crud . route ( '/credentials/' , methods =[ 'GET' ] ) def get_credentials_list () : return jsonify ( get_all_credentials ())","title":"get_credentials_list"},{"location":"reference/wol/views/crud/#get_target_by_id_","text":"def get_target_by_id_ ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'GET' ] ) def get_target_by_id_ ( pk : int ) : return get_target_by_id ( pk )","title":"get_target_by_id_"},{"location":"reference/wol/views/crud/#get_target_by_name_","text":"def get_target_by_name_ ( name : str ) View Source @crud . route ( '/targets/<name>/' , methods =[ 'GET' ] ) def get_target_by_name_ ( name : str ) : return get_target_by_name ( name )","title":"get_target_by_name_"},{"location":"reference/wol/views/crud/#get_targets","text":"def get_targets ( ) View Source @crud . route ( '/targets/' , methods =[ 'GET' ] ) def get_targets () : return jsonify ( get_all_targets ())","title":"get_targets"},{"location":"reference/wol/views/crud/#update_credentials","text":"def update_credentials ( pk : int , body : dict ) View Source @crud . route ( '/credentials/<int:pk>/' , methods =[ 'PUT', 'PATCH' ] ) @parse_body ( CredentialsSchema ()) def update_credentials ( pk : int , body : dict ) : edit_credentials_by_id ( pk , ** body ) return '' , 204","title":"update_credentials"},{"location":"reference/wol/views/crud/#update_target","text":"def update_target ( pk : int , body : dict ) View Source @crud . route ( '/targets/<int:pk>/' , methods =[ 'PUT', 'PATCH' ] ) @parse_body ( TargetSchema ()) def update_target ( pk : int , body : dict ) : edit_target_by_id ( pk , ** body ) return '' , 204","title":"update_target"},{"location":"reference/wol/views/crud/#wakeup_target","text":"def wakeup_target ( pk : int ) View Source @crud . route ( '/targets/<int:pk>/wake/' , methods =[ 'POST' ] ) def wakeup_target ( pk : int ) : wakeup_target_by_id ( pk ) return '' , 204","title":"wakeup_target"},{"location":"reference/wol/views/pages/","text":"Module wol.views.pages None None View Source from flask import Blueprint , render_template from ..logic.crud import get_all_targets pages = Blueprint ( 'web' , __name__ , template_folder = '../templates' ) @pages . route ( '/targets/' , methods = [ 'GET' ]) def get_web_targets (): targets = get_all_targets () return render_template ( 'targets.html' , targets = targets ) Variables pages Functions get_web_targets def get_web_targets ( ) View Source @pages . route ( '/targets/' , methods =[ 'GET' ] ) def get_web_targets () : targets = get_all_targets () return render_template ( 'targets.html' , targets = targets )","title":"Pages"},{"location":"reference/wol/views/pages/#module-wolviewspages","text":"None None View Source from flask import Blueprint , render_template from ..logic.crud import get_all_targets pages = Blueprint ( 'web' , __name__ , template_folder = '../templates' ) @pages . route ( '/targets/' , methods = [ 'GET' ]) def get_web_targets (): targets = get_all_targets () return render_template ( 'targets.html' , targets = targets )","title":"Module wol.views.pages"},{"location":"reference/wol/views/pages/#variables","text":"pages","title":"Variables"},{"location":"reference/wol/views/pages/#functions","text":"","title":"Functions"},{"location":"reference/wol/views/pages/#get_web_targets","text":"def get_web_targets ( ) View Source @pages . route ( '/targets/' , methods =[ 'GET' ] ) def get_web_targets () : targets = get_all_targets () return render_template ( 'targets.html' , targets = targets )","title":"get_web_targets"}]}